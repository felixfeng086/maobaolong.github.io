<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[saltstack-minion]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/12/16/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/bigdata/saltstack-minion/</url>
      <content type="html"><![CDATA[<h2 id="salt命令列表"><a href="#salt命令列表" class="headerlink" title="salt命令列表"></a>salt命令列表</h2><p>salt<br>salt-api<br>salt-call<br>salt-cp<br>salt-key<br>salt-master<br>salt-minion<br>salt-run<br>salt-ssh<br>salt-unity</p>
<h2 id="在minion上查看正在执行的任务，可以通过文件来查看"><a href="#在minion上查看正在执行的任务，可以通过文件来查看" class="headerlink" title="在minion上查看正在执行的任务，可以通过文件来查看"></a>在minion上查看正在执行的任务，可以通过文件来查看</h2><p>ls /var/cache/salt/minion/proc<br>master的job<br>ls /var/cache/salt/master/jobs/</p>
<h2 id="master端的jobs，默认保存时间为24小时"><a href="#master端的jobs，默认保存时间为24小时" class="headerlink" title="master端的jobs，默认保存时间为24小时"></a>master端的jobs，默认保存时间为24小时</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@salt-master:~# grep &quot;keep_jobs&quot; /etc/salt/master</div><div class="line">#keep_jobs: 24</div><div class="line">root@salt-master:~#</div></pre></td></tr></table></figure>
<h2 id="查看job"><a href="#查看job" class="headerlink" title="查看job"></a>查看job</h2><p>salt-run jobs.active</p>
<h2 id="查看历史job"><a href="#查看历史job" class="headerlink" title="查看历史job"></a>查看历史job</h2><p>salt-run jobs.list_jobs | tail  -n 16</p>
<h2 id="查看某个任务的执行结果"><a href="#查看某个任务的执行结果" class="headerlink" title="查看某个任务的执行结果"></a>查看某个任务的执行结果</h2><p>salt-run jobs.lookup_jid 20140625200258757661</p>
<h2 id="某个结点执行命令"><a href="#某个结点执行命令" class="headerlink" title="某个结点执行命令"></a>某个结点执行命令</h2><p>salt ‘172.16.166.34’ cmd.run  ‘ls ‘</p>
<h2 id="将本机的文件拷贝到-目标结点的-root-getIP-py"><a href="#将本机的文件拷贝到-目标结点的-root-getIP-py" class="headerlink" title="将本机的文件拷贝到 目标结点的/root/getIP.py"></a>将本机的文件拷贝到 目标结点的/root/getIP.py</h2><p>salt-cp ‘172.16.166.34’  ./getIP.py /root/getIP.py</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[树莓派接人体感应传感器]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/12/15/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E6%A0%91%E8%8E%93%E6%B4%BE/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%8E%A5%E4%BA%BA%E4%BD%93%E6%84%9F%E5%BA%94%E4%BC%A0%E6%84%9F%E5%99%A8/</url>
      <content type="html"><![CDATA[<h1 id="HC-SR501-感应模块简介"><a href="#HC-SR501-感应模块简介" class="headerlink" title="HC-SR501 感应模块简介"></a>HC-SR501 感应模块简介</h1><p><img src="http://bbs.pediy.com/attachment.php?attachmentid=107366&amp;thumb=1&amp;d=1474898982" alt=""><br><img src="http://bbs.pediy.com/attachment.php?attachmentid=107367&amp;thumb=1&amp;d=1474898982" alt=""><br><img src="http://bbs.pediy.com/attachment.php?attachmentid=107368&amp;thumb=1&amp;d=1474898982" alt=""></p>
<p><img src="http://bbs.pediy.com/attachment.php?attachmentid=107369&amp;thumb=1&amp;d=1474898982" alt=""><br><img src="http://img.blog.csdn.net/20160927164752759" alt=""></p>
<p>对照前面的参数以及电路图，找到下面的左右针脚正负极，中间的PIN为感应输出，感应到人体时，输出3.3V高电平，检测不到信号时输出0。同时还要求工作电压在4.5V-20V之间。恰好树莓派的P1编号中第2，4号PIN都是5V的电压，满足要求，所以这次我们要接5V的电压。</p>
<p>  参数调节旋钮是用来扭动控制一些参数的。比如探测的延时时间，灵敏度等等。具体可以参看 HC -SR501的说明书。这里我们都使用默认值。</p>
<p>  但是有一个关键的L H模式调节阀门要介绍一下，右上角有三个针脚，按照我实物照片，假定从上到下为123 。还有一个黄色的套接头，图中套接头接通了2 3号，代表了H模式，这个套接头是可以拔下来的，然后插到上面来，接通1 2号，代表了L模式。<br>  L模式是不可重复触发，当探测到一次人体时，输出一次高电平，保持一段时间恢复低电平，在此期间如果还是检测到了人体也不再延长这个高电平的时间。等到低电平的封锁时间（前面默认是2.5S）过了以后才又开始检测。<br>  H模式是可以重复触发，如果一直感应到人体时，会一直输出高电平，直到探测不到人体后保持小段时间然后恢复低电平。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[alluxio介绍与安装]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/12/13/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/bigdata/alluxio/</url>
      <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li>概念：是一个开源的基于内存的分布式存储系统，现在成为开源社区中成长最快的大数据开源项目之一。</li>
</ul>
<h2 id="公司简介"><a href="#公司简介" class="headerlink" title="公司简介"></a>公司简介</h2><ul>
<li>由项目的创建者李浩源以及来自UC Berkeley, Google, CMU, Palantir, Stanford, Yahoo等不同公司和学校的项目核心开发者组成。</li>
<li>完成750万 dollars 的A轮融资，由Andreessen Horowitz投资（硅谷最著名的VC之一，主要成员为网景公司创始人之一）。</li>
</ul>
<p>作者：Mingche Su<br>链接：<a href="https://zhuanlan.zhihu.com/p/20624086" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/20624086</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><ul>
<li>Amazon AWS ：亚马逊AWS 云服务-中国领先的可扩展云计算平台</li>
<li>Amazon S3 ：是一种在Internet 上的云存储服务。 要上传数据（照片、视频、文档等），请首先在一个AWS 区域中创建存储桶。 然后，您可以将任何数量的对象上传到该存储桶。</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li><p>解压</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ tar -xzf alluxio-1.3.0-bin.tar.gz</div><div class="line">$ cd alluxio-1.3.0</div></pre></td></tr></table></figure>
</li>
<li><p>生成配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/alluxio bootstrapConf localhost</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/alluxio format</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux下文件类型及表示颜色]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/12/01/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/linux/Linux%E4%B8%8B%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E5%8F%8A%E8%A1%A8%E7%A4%BA%E9%A2%9C%E8%89%B2/</url>
      <content type="html"><![CDATA[<h1 id="Linux下文件类型及表示颜色"><a href="#Linux下文件类型及表示颜色" class="headerlink" title="Linux下文件类型及表示颜色:"></a>Linux下文件类型及表示颜色:</h1><p>　　白色：普通文件 (用-表示)</p>
<p>　　n 红色：压缩文件</p>
<p>　　n 蓝色：目录文件 (用d表示)</p>
<p>　　n 青蓝色：链接文件 (用l表示)</p>
<p>　　n 黄色：设备文件(/dev目录下)(用b或c表示)</p>
<p>　　b表示的是物理设备;c表示的是字符终端设备.</p>
<p>　　n 青绿色：可执行文件(/bin、/sbin目录下)</p>
<p>　　n 粉红色：图片文件或是socket文件(用s表示)</p>
<p>　　n 青黄色：管道文件 (用p表示)</p>
<p>　　Linux下用字符表示的文件类型</p>
<p>　　-：普通文件</p>
<p>　　d：目录文件</p>
<p>　　l：链接文件</p>
<p>　　b：块设备文件</p>
<p>　　c：字符设备文件</p>
<p>　　p：管道文件</p>
<p>　　Linux文件系统配置文件</p>
<p>　　/proc—–内核提供的一个接口，主要用来存储系统统计信息;</p>
<p>　　/etc/mtab——–随着/proc/mount的变化而变化，文件系统的安装和卸载都会在这个文件中反映出来;</p>
<p>　　/etc/fstab——-列出当前系统在启动时自动安装的所有文件系统，也可以使用mount -a 这个命令来手动的安</p>
<p>　　装这个文件中列出的所有文件系统;另外也可以通过修改这个配置文件，使系统在启动时自动安装我们所需要</p>
<p>　　的其他的文件系统;</p>
<p>　　/etc/mtools.conf———dos文件系统上的操作的配置文件</p>
<p>　　Linux系统管理配置文件</p>
<p>　　/etc/group———-列出有效的组名称以及组中的用户信息;</p>
<p>　　/etc/passwd———帐号的密码文件;</p>
<p>　　帐号—-密码——用户号(UID)—–用户组号(GID)—-所属组—–用户主目录—用户所使用的shell类型</p>
<p>　　/etc/shadow——–包含加密后的帐号信息;</p>
<p>　　/etc/shells——-包含系统的可以使用的shell的列表;</p>
<p>　　/etc/motd———每日的信息，root管理员向系统中所有用户传达信息时使用</p>
<p>　　Linux系统命令配置文件</p>
<p>　　/etc/lilo.conf 包含系统的缺省引导命令行参数，还有启动时使用的不同映象。您在 LILO 引导提示的时候按</p>
<p>　　Tab 键就可以看到这个列表。</p>
<p>　　/etc/logrotate.conf 维护 /var/log 目录中的日志文件。</p>
<p>　　/etc/identd.conf identd是一个超级服务器，这个文件对于的是它的配置文件。</p>
<p>　　/etc/ld.so.conf “动态链接程序”(Dynamic Linker)的配置。</p>
<p>　　/etc/inittab 按年代来讲，这是 UNIX 中第一个配置文件。在一台 UNIX 机器打开之后启动的第一个程序是</p>
<p>　　init，它知道该启动什么，这是由于 inittab 的存在。在运行级别改变时，init 读取 inittab，然后控制主进程的启动</p>
<p>　　Linux主机配置文件</p>
<p>　　/etc/host.conf———告诉域名服务器如何查找主机名</p>
<p>　　/etc/hosts———网络中已发现的主机的名称列表，用于解析主机名</p>
<p>　　/etc/sysconfig/network 主机名和网关的信息  </p>
<p>文件</p>
<p>　　Linux连网配置文件</p>
<p>　　/etc/gated.conf gated 的配置。只能被 gated 守护进程所使用。</p>
<p>　　/etc/networks 列举从机器所连接的网络可以访问的网络名和网络地址。通过路由命令使用。允许使用网络</p>
<p>　　名称。</p>
<p>　　/etc/protocols 列举当前可用的协议。</p>
<p>　　/etc/resolv.conf 在程序请求“解析”一个 IP 地址时告诉内核应该查询哪个名称服务器。</p>
<p>　　/etc/rpc 包含 RPC 指令/规则，这些指令/规则可以在 NFS 调用、远程文件系统安装等中使用。</p>
<p>　　/etc/exports 要导出的文件系统(NFS)和对它的权限。</p>
<p>　　/etc/services 将网络服务名转换为端口号/协议。由 inetd、telnet、tcpdump 和一些其它程序读取。有一些C访问例程。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[元宝]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/11/25/%E8%82%B2%E5%84%BF%E7%BB%8F/%E5%85%83%E5%AE%9D/</url>
      <content type="html"><![CDATA[<h2 id="出生信息"><a href="#出生信息" class="headerlink" title="出生信息"></a>出生信息</h2><p>日期: 2016-4-30 12:03<br>重量: 3770g   3580g  3620g  3670g<br>身长: 52cm</p>
<h2 id="会翻身"><a href="#会翻身" class="headerlink" title="会翻身"></a>会翻身</h2><p>3个月</p>
<h2 id="会坐"><a href="#会坐" class="headerlink" title="会坐"></a>会坐</h2><p>日期: 2016-11-5  六个月</p>
<h2 id="出牙"><a href="#出牙" class="headerlink" title="出牙"></a>出牙</h2><p>日期:2016-11-4 六个月</p>
<h2 id="会爬"><a href="#会爬" class="headerlink" title="会爬"></a>会爬</h2><p>期待中</p>
<h2 id="第一次挨摔"><a href="#第一次挨摔" class="headerlink" title="第一次挨摔"></a>第一次挨摔</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[树莓派上ownCloud的安装]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/11/25/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E6%A0%91%E8%8E%93%E6%B4%BE/ownCloud%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h1 id="树莓派上ownCloud的安装"><a href="#树莓派上ownCloud的安装" class="headerlink" title="树莓派上ownCloud的安装"></a>树莓派上ownCloud的安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">sudo apt-get install apache2 php5 php5-gd php-xml-parser php5-intl php5-sqlite php5-mysql smbclient curl libcurl3 php5-curl mysql-server</div></pre></td></tr></table></figure>
<h2 id="安装apache"><a href="#安装apache" class="headerlink" title="安装apache"></a>安装apache</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install apache2</div></pre></td></tr></table></figure>
<h2 id="安装php"><a href="#安装php" class="headerlink" title="安装php"></a>安装php</h2><h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><h2 id="安装owncloud"><a href="#安装owncloud" class="headerlink" title="安装owncloud"></a>安装owncloud</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ tar xjf owncloud-4.5.6.tar.bz2</div><div class="line">$ cp -r -v owncloud/ /var/www/owncloud/</div></pre></td></tr></table></figure>
<h2 id="安装ownCloud客户端"><a href="#安装ownCloud客户端" class="headerlink" title="安装ownCloud客户端"></a>安装ownCloud客户端</h2><p>sudo apt-get install owncloud-client</p>
<p>/etc/init.d/apache2 restart</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jquery中attr和prop的区别（转）]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/11/24/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/web/jquery%E4%B8%ADattr%E5%92%8Cprop%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<h1 id="jquery中attr和prop的区别"><a href="#jquery中attr和prop的区别" class="headerlink" title="jquery中attr和prop的区别"></a>jquery中attr和prop的区别</h1><h2 id="转自〖芈老头〗的技术空间"><a href="#转自〖芈老头〗的技术空间" class="headerlink" title="转自〖芈老头〗的技术空间"></a>转自<a href="http://www.cnblogs.com/Showshare/p/different-between-attr-and-prop.html" title="〖芈老头〗的技术空间" target="_blank" rel="external">〖芈老头〗的技术空间</a></h2><p>在高版本的jquery引入prop方法后，什么时候该用prop？什么时候用attr？它们两个之间有什么区别？这些问题就出现了。</p>
<p>关于它们两个的区别，网上的答案很多。这里谈谈我的心得，我的心得很简单：</p>
<ul>
<li>对于HTML元素本身就带有的固有属性，在处理时，使用prop方法。</li>
<li>对于HTML元素我们自己自定义的DOM属性，在处理时，使用attr方法。</li>
</ul>
<p>上面的描述也许有点模糊，举几个例子就知道了。</p>
<p> 这个例子里<code>&lt;a&gt;</code>元素的DOM属性有href、target和class，这些属性就是<code>&lt;a&gt;</code>元素本身就带有的属性，也是W3C标准里就包含有这几个属性，或者说在IDE里能够智能提示出的属性，这些就叫做固有属性。处理这些属性时，建议使用prop方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=&quot;#&quot; id=&quot;link1&quot; action=&quot;delete&quot;&gt;删除&lt;/a&gt;</div></pre></td></tr></table></figure>
<p>这个例子里<code>&lt;a&gt;</code>元素的DOM属性有“href、id和action”，很明显，前两个是固有属性，而后面一个“action”属性是我们自己自定义上去的，<code>&lt;a&gt;</code>元素本身是没有这个属性的。这种就是自定义的DOM属性。处理这些属性时，建议使用attr方法。使用prop方法取值和设置属性值时，都会返回undefined值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=&quot;http://www.baidu.com&quot; target=&quot;_self&quot; class=&quot;btn&quot;&gt;百度&lt;/a&gt;</div></pre></td></tr></table></figure>
<p>再举一个例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;input id=&quot;chk1&quot; type=&quot;checkbox&quot; /&gt;是否可见</div><div class="line">&lt;input id=&quot;chk2&quot; type=&quot;checkbox&quot; checked=&quot;checked&quot; /&gt;是否可见</div></pre></td></tr></table></figure>
<p>像checkbox，radio和select这样的元素，选中属性对应“checked”和“selected”，这些也属于固有属性，因此需要使用prop方法去操作才能获得正确的结果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(&quot;#chk1&quot;).prop(&quot;checked&quot;) == false</div><div class="line">$(&quot;#chk2&quot;).prop(&quot;checked&quot;) == true</div></pre></td></tr></table></figure>
<p>如果上面使用attr方法，则会出现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(&quot;#chk1&quot;).attr(&quot;checked&quot;) == undefined</div><div class="line">$(&quot;#chk2&quot;).attr(&quot;checked&quot;) == &quot;checked&quot;</div></pre></td></tr></table></figure>
<p>全文完。</p>
<p>以下是官方建议attr(),prop()的使用：</p>
<table>
<thead>
<tr>
<th>Attribute/Property</th>
<th>.attr()</th>
<th>.prop()</th>
</tr>
</thead>
<tbody>
<tr>
<td>accesskey</td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>align</td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>async</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>autofocus</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>checked</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>class</td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>contenteditable</td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>draggable</td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>href</td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>id</td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>label</td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>location ( i.e. window.location )</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>multiple</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>readOnly</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>rel</td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>selected</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>src</td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>tabindex</td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>title</td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>type</td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>width ( if needed over .width() )</td>
<td>√</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="转自mylove"><a href="#转自mylove" class="headerlink" title="转自mylove"></a>转自<a href="http://aijuans.iteye.com/blog/1954744" title="mylove" target="_blank" rel="external">mylove</a></h2><p>attribute和property都可以翻译为属性，为了以示区别，通常把这两个单词翻译为属性与特性。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;test&quot;&gt;Click Here&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>上面这段HTML语句中有三个节点，分别是Element “div”、attribute “id”、Text “click here”，我们最常见的attribute正式指的attribute类型节点，在JavaScript有专门处理attribute的函数 .getAttribute(name) / setAttribute(name,value)。当然attribute不只是我们能够在HTML文档上看到的这几个，我们可以自定义attributed加到DOM节点中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;test&quot;&gt;123&lt;/div&gt;</div><div class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">        var t=document.getElementById(&apos;test&apos;);</div><div class="line">        t.setAttribute(&apos;class&apos;,&apos;active&apos;);</div><div class="line">        t.setAttribute(&apos;customizedAttr&apos;,&apos;customized&apos;);</div><div class="line">    &lt;/script&gt;</div></pre></td></tr></table></figure>
<p>这样可以div被修改为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;test&quot; class=&quot;active&quot; customizedattr=&quot;customized&quot;&gt;123&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>通过方法 setAttribute设置的attribute最终都会反映到元素的attribute类型的节点中</p>
<p>property是DOM对象的字段，跟我们平常使用的一些对象一样，包含很多字段，这些字段就是property，取值或者设置值和普通字段一样通过”对象.字段“的方式。</p>
<p>看起来attribute和property应该没有什么关系才对，怎么会。。。attribute和property容易混倄是因为很多attribute节点还有一个相对应的property属性，比如上面div的”id“ attribute 同样可以用t.id取到（实际上绝大部分人都是这样获取的），通过property更改id后，用getAttibute获取的id是更新后的id。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">t.id=&apos;test1&apos;;</div><div class="line">console.log(t.getAttribute(&apos;id&apos;));//test1</div></pre></td></tr></table></figure>
<p>同样我们也可以自定义property</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">t.customizedProp=&apos;customized prop&apos;;</div></pre></td></tr></table></figure>
<p>==区别==</p>
<ol>
<li>于build-in属性，attribute和property共享数据，attribute更改了会对property造成影响，反之亦然，但是两者的自定义属性是独立的数据，即使name一样，也互不影响，看起来是下面这张图，但是IE6、7没有作区分，依然共享自定义属性数据<br><img src="http://images.cnitblog.com/blog/349217/201309/14160245-d2d2e19297c94935a1ad388be27ba869.png" alt=""></li>
<li>并不是所有的attribute与对应的property名字都一致，比如刚才使用的attribute 的class属性，使用property操作的时候应该是这样className</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input id=&quot;test3&quot; type=&quot;checkbox&quot;/&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var t=document.getElementById(&apos;test3&apos;);</div><div class="line">        console.log(t.getAttribute(&apos;checked&apos;));//null</div><div class="line">        console.log(t.checked);//false;</div><div class="line">        </div><div class="line">        t.setAttribute(&apos;checked&apos;,&apos;checked&apos;);</div><div class="line">        console.log(t.getAttribute(&apos;checked&apos;));//checked</div><div class="line">        console.log(t.checked);//true</div><div class="line">        </div><div class="line">        t.checked=false;</div><div class="line">        console.log(t.getAttribute(&apos;checked&apos;));//checked</div><div class="line">        console.log(t.checked);//false</div></pre></td></tr></table></figure>
<ol>
<li>对于一些和路径相关的属性，两者取得值也不尽相同，但是同样attribute取得是字面量，property取得是计算后的完整路径</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a id=&quot;test4&quot; href=&quot;#&quot;&gt;Click&lt;/a&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var t=document.getElementById(&apos;test4&apos;);</div><div class="line">        console.log(t.getAttribute(&apos;href&apos;));//#</div><div class="line">        console.log(t.href);//file:///C:/Users/bsun/Desktop/ss/anonymous.html#</div></pre></td></tr></table></figure>
<p>关于浏览器（IE）造成的兼容性问题可以看看IE 混淆了 DOM 对象属性（property）及 HTML 标签属性（attribute），造成了对 setAttribute、getAttribute 的不正确实现</p>
<p>==<strong>attr和prop</strong>==<br>相信看完上面内容，大家就明白为什么jQuery要添加prop方法了，在jQuery API中也有专门解释<br><strong>Attributes VS. Properties</strong><br>在一些特殊的情况下，attributes和properties的区别非常大。在jQuery1.6之前，.attr()方法在获取一些attributes的时候使用了property值，这样会导致一些不一致的行为。在jQuery1.6中，.prop()方法提供了一中明确的获取property值得方式，这样.attr()方法仅返回attributes。</p>
<p>比如，selectedIndex, tagName, nodeName, nodeType, ownerDocument, defaultChecked, 和defaultSelected应该使用.prop()方法获取/设置值。 在jQuery1.6之前这些不属于attribute的property需要用.attr()方法获取。这几个并没有相应的attibute，只有property。</p>
<p>关于布尔类型 attributes，比如一个这样的HTML标签，它在JavaScript中变量名为elem</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;checkbox&quot; checked=&quot;checked&quot; /&gt;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>elem.checked</td>
<td>true (Boolean) Will change with checkbox state</td>
</tr>
<tr>
<td>$( elem ).prop( “checked” )</td>
<td>true (Boolean) Will change with checkbox state</td>
</tr>
<tr>
<td>elem.getAttribute( “checked” )</td>
<td>“checked” (String) Initial state of the checkbox; does not change</td>
</tr>
<tr>
<td>$( elem ).attr( “checked” ) (1.6)</td>
<td>“checked” (String) Initial state of the checkbox; does not change</td>
</tr>
<tr>
<td>$( elem ).attr( “checked” ) (1.6.1+)</td>
<td>“checked” (String) Will change with checkbox state</td>
</tr>
<tr>
<td>$( elem ).attr( “checked” ) (pre-1.6)</td>
<td>true (Boolean) Changed with checkbox state</td>
</tr>
</tbody>
</table>
<p>根据W3C forms specification，checked属性是一个布尔值，这就意味着只要checked属性在HTML中表现出来了，那么相应的property就应该是true，即使checked没有值，这点儿对其它布尔类型的属性一样适用。</p>
<p>然而关于checked 属性需要记住的最重要的一点是：它和checked property并不是一致的。实际上这个attribute和defaultChecked property一致，而且只应该用来设置checkbox的初始值。checked attribute并不随着checkedbox的状态而改变，但是checked property却跟着变。因此浏览器兼容的判断checkebox是否被选中应该使用property</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if ( elem.checked )</div><div class="line">if ( $( elem ).prop( &quot;checked&quot; ) )</div><div class="line">if ( $( elem ).is( &quot;:checked&quot; ) )</div></pre></td></tr></table></figure>
<p>这对其它一些类似于selected、value这样的动态attribute也适用。</p>
<p>在IE9之前版本中，如果property没有在DOM元素被移除之前删除，使用.prop()方法设置DOM元素property（简单类型除外：number、string、boolean）的值会导致内存泄露。为了安全的设置DOM对象的值，避免内存泄露，可以使用.data()方法。</p>
<p><img src="http://images.cnitblog.com/blog/349217/201310/01161410-90dde52753e040f3a09b83c418e94026.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[idea]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/11/21/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/idea/</url>
      <content type="html"><![CDATA[<h2 id="maven-helper"><a href="#maven-helper" class="headerlink" title="maven helper"></a>maven helper</h2><p>maven依赖冲突解决利器</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[maven]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/11/16/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/maven/</url>
      <content type="html"><![CDATA[<h2 id="maven-安装本地库"><a href="#maven-安装本地库" class="headerlink" title="maven 安装本地库"></a>maven 安装本地库</h2><p>mvn install:install-file -DgroupId=com.facebook.presto -DartifactId=presto-jdbc -Dversion=0.132-SNAPSHOT -Dpackaging=jar -Dfile=presto-jdbc-0.132-SNAPSHOT.jar</p>
<h2 id="打包jar"><a href="#打包jar" class="headerlink" title="打包jar"></a>打包jar</h2><h3 id="依赖包独立存在"><a href="#依赖包独立存在" class="headerlink" title="依赖包独立存在"></a>依赖包独立存在</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">pom中加入</div><div class="line">&lt;plugin&gt;</div><div class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</div><div class="line">                &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;</div><div class="line">                &lt;configuration&gt;</div><div class="line">                    &lt;archive&gt;</div><div class="line">                        &lt;manifest&gt;</div><div class="line">                            &lt;addClasspath&gt;true&lt;/addClasspath&gt;</div><div class="line">                            &lt;mainClass&gt;youmainclasspath&lt;/mainClass&gt;</div><div class="line">                        &lt;/manifest&gt;</div><div class="line">                    &lt;/archive&gt;</div><div class="line">                &lt;/configuration&gt;</div><div class="line">            &lt;/plugin&gt;</div><div class="line">执行 mvn dependency:copy-dependencies -DoutputDirectory=lib package</div><div class="line">然后把lib里的所有jar放到你工程的jar包所在的目录</div><div class="line">运行java -jar youjar.jar</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CENTOS笔记]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/11/09/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/linux/centos/</url>
      <content type="html"><![CDATA[<h1 id="CENTOS笔记"><a href="#CENTOS笔记" class="headerlink" title="CENTOS笔记"></a>CENTOS笔记</h1><p>[TOC]</p>
<p>##连接无线网</p>
<h3 id="ip-addr"><a href="#ip-addr" class="headerlink" title="ip addr"></a>ip addr</h3><p>找到自己的无线网接口 （ps:本人的是wlp5s0）</p>
<h3 id="ip-link-set-wlp5s0-up"><a href="#ip-link-set-wlp5s0-up" class="headerlink" title="ip link set wlp5s0 up"></a>ip link set wlp5s0 up</h3><p>打开无线网的驱动</p>
<h3 id="ip-link-show-wlp5s0"><a href="#ip-link-show-wlp5s0" class="headerlink" title="ip link show wlp5s0"></a>ip link show wlp5s0</h3><p>查看该网络接口的状态</p>
<h3 id="连接无线网"><a href="#连接无线网" class="headerlink" title="连接无线网"></a>连接无线网</h3><p>wpa_supplicant -B -i wlp5s0 -c &lt;(wpa_passphrase “ssid” “psk”) (连接无线网ssid，密码psk)</p>
<h3 id="dhcp分配ip"><a href="#dhcp分配ip" class="headerlink" title="dhcp分配ip"></a>dhcp分配ip</h3><p>dhclient wlp5s0(为wlp5s0分配ip地址)</p>
<h2 id="软件源"><a href="#软件源" class="headerlink" title="软件源"></a>软件源</h2><h3 id="下载源"><a href="#下载源" class="headerlink" title="下载源"></a>下载源</h3><p>wget -O /etc/yum.repos.d/CentOS-Base.repo <a href="http://mirrors.aliyun.com/repo/Centos-7.repo" target="_blank" rel="external">http://mirrors.aliyun.com/repo/Centos-7.repo</a><br>wget -O /etc/yum.repos.d/CentOS-Base.repo <a href="http://mirrors.163.com/.help/CentOS7-Base-163.repo" target="_blank" rel="external">http://mirrors.163.com/.help/CentOS7-Base-163.repo</a></p>
<p>wget -O /etc/yum.repos.d/CentOS-Base.repo <a href="http://mirrors.sohu.com/help/CentOS-Base-sohu.repo" target="_blank" rel="external">http://mirrors.sohu.com/help/CentOS-Base-sohu.repo</a><br>wget -O /etc/yum.repos.d/CentOS-Base.repo <a href="http://centos.ustc.edu.cn/CentOS-Base.repo" target="_blank" rel="external">http://centos.ustc.edu.cn/CentOS-Base.repo</a></p>
<h3 id="安装源"><a href="#安装源" class="headerlink" title="安装源"></a>安装源</h3><p>yum clean all<br>yum makecache</p>
<h2 id="ssh修改端口号"><a href="#ssh修改端口号" class="headerlink" title="ssh修改端口号"></a>ssh修改端口号</h2><h3 id="step1-修改-etc-ssh-sshd-config"><a href="#step1-修改-etc-ssh-sshd-config" class="headerlink" title="step1 修改/etc/ssh/sshd_config"></a>step1 修改/etc/ssh/sshd_config</h3><p>vi /etc/ssh/sshd_config<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#Port 22         //这行去掉#号</div><div class="line">Port 20000      //下面添加这一行</div></pre></td></tr></table></figure></p>
<h3 id="step2-修改SELinux"><a href="#step2-修改SELinux" class="headerlink" title="step2 修改SELinux"></a>step2 修改SELinux</h3><p>yum -y install policycoreutils-python</p>
<p>使用以下命令查看当前SElinux 允许的ssh端口：<br>semanage port -l | grep ssh</p>
<p>添加20000端口到 SELinux<br>semanage port -a -t ssh_port_t -p tcp 20000</p>
<p>然后确认一下是否添加进去<br>semanage port -l | grep ssh<br>如果成功会输出<br>ssh_port_t                    tcp    20000, 22</p>
<h3 id="step3-重启ssh"><a href="#step3-重启ssh" class="headerlink" title="step3 重启ssh"></a>step3 重启ssh</h3><p>systemctl restart sshd.service</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[etcd]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/11/09/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/etcd/</url>
      <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>etcd是一个高可用的键值存储系统，主要用于共享配置和服务发现。etcd是由CoreOS开发并维护的，灵感来自于 ZooKeeper 和 Doozer，它使用Go语言编写，并通过Raft一致性算法处理日志复制以保证强一致性。Raft是一个来自Stanford的新的一致性算法，适用于分布式系统的日志复制，Raft通过选举的方式来实现一致性，在Raft中，任何一个节点都可能成为Leader。Google的容器集群管理系统Kubernetes、开源PaaS平台Cloud Foundry和CoreOS的Fleet都广泛使用了etcd。</p>
<p>etcd 集群的工作原理基于 raft 共识算法 (The Raft Consensus Algorithm)。etcd 在 0.5.0 版本中重新实现了 raft 算法，而非像之前那样依赖于第三方库 go-raft 。raft 共识算法的优点在于可以在高效的解决分布式系统中各个节点日志内容一致性问题的同时，也使得集群具备一定的容错能力。即使集群中出现部分节点故障、网络故障等问题，仍可保证其余大多数节点正确的步进。甚至当更多的节点（一般来说超过集群节点总数的一半）出现故障而导致集群不可用时，依然可以保证节点中的数据不会出现错误的结果。</p>
<h2 id="设置值，允许目录不存在"><a href="#设置值，允许目录不存在" class="headerlink" title="设置值，允许目录不存在"></a>设置值，允许目录不存在</h2><p>curl -x 172.22.91.78:80 -X PUT <a href="http://172.22.77.107:2379/v2/keys/presto/clustertest/y2/worker2/bbb" target="_blank" rel="external">http://172.22.77.107:2379/v2/keys/presto/clustertest/y2/worker2/bbb</a> -d value=”sss”|python -m json.tool</p>
<h2 id="删除空目录"><a href="#删除空目录" class="headerlink" title="删除空目录"></a>删除空目录</h2><p> curl -X DELETE -x 172.22.91.78:80 <a href="http://172.22.77.109:2379/v2/keys/presto/clustertest/66?dir=true|python" target="_blank" rel="external">http://172.22.77.109:2379/v2/keys/presto/clustertest/66?dir=true|python</a> -m json.tool</p>
<h2 id="删除目录所有内容"><a href="#删除目录所有内容" class="headerlink" title="删除目录所有内容"></a>删除目录所有内容</h2><p> curl -X DELETE -x 172.22.91.78:80 <a href="http://172.22.77.109:2379/v2/keys/presto/clustertest/66?recursive=true|python" target="_blank" rel="external">http://172.22.77.109:2379/v2/keys/presto/clustertest/66?recursive=true|python</a> -m json.tool</p>
<h2 id="获取成员"><a href="#获取成员" class="headerlink" title="获取成员"></a>获取成员</h2><p>curl -x 172.22.91.78:80 -H “Content-type: application/json” <a href="http://172.22.77.109:2379/v2/members|python" target="_blank" rel="external">http://172.22.77.109:2379/v2/members|python</a> -m json.tool</p>
<h2 id="查看是否leader"><a href="#查看是否leader" class="headerlink" title="查看是否leader"></a>查看是否leader</h2><p>curl -x 172.22.91.78:80 -H “Content-type: application/json” <a href="http://172.22.77.108:2379/v2/stats/self" target="_blank" rel="external">http://172.22.77.108:2379/v2/stats/self</a> |python -m json.tool<br>curl -x 172.22.91.78:80 -H “Content-type: application/json” <a href="http://172.22.77.107:2379/v2/stats/leader|python" target="_blank" rel="external">http://172.22.77.107:2379/v2/stats/leader|python</a> -m json.tool</p>
<h2 id="查看是否健康"><a href="#查看是否健康" class="headerlink" title="查看是否健康"></a>查看是否健康</h2><p>curl -x 172.22.91.78:80 -H “Content-type: application/json” <a href="http://172.22.77.107:2379/health|python" target="_blank" rel="external">http://172.22.77.107:2379/health|python</a> -m json.tool</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[kafka]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/11/09/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/kafka/</url>
      <content type="html"><![CDATA[<h2 id="启动zookeeper"><a href="#启动zookeeper" class="headerlink" title="启动zookeeper"></a>启动zookeeper</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/zookeeper-server-start.sh config/zookeeper.properties &amp;</div></pre></td></tr></table></figure>
<h2 id="启动KAFKA"><a href="#启动KAFKA" class="headerlink" title="启动KAFKA"></a>启动KAFKA</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/kafka-server-start.sh config/server.properties &amp;</div></pre></td></tr></table></figure>
<h2 id="模拟consumer"><a href="#模拟consumer" class="headerlink" title="模拟consumer"></a>模拟consumer</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/kafka-console-consumer.sh --zookeeper 127.0.0.1:2181 --from-beginning --topic self_healing</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[velocity]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/11/09/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/velocity/</url>
      <content type="html"><![CDATA[<h2 id="JAVA中的map传到vm中"><a href="#JAVA中的map传到vm中" class="headerlink" title="JAVA中的map传到vm中"></a>JAVA中的map传到vm中</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">One option along the lines of what you already have should be to add the attributes to the model as a map. So in java</div><div class="line">map = new HashMap(); </div><div class="line">map.put(&quot;id&quot;, &quot;solikang&quot;)</div><div class="line">map.put(&quot;pwd&quot;, &quot;1234&quot;)</div><div class="line">map.put(&quot;email&quot;, &quot;something@example.com&quot;);</div><div class="line">model.addAttribute(&quot;data&quot;, map);</div><div class="line">Then in velocity</div><div class="line">#foreach ($key in $data.keySet())</div><div class="line">  &lt;input type=&quot;hidden&quot; name=&quot;$key&quot; value=&quot;$data.get($key)&quot;&gt;</div><div class="line">#end</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[zookeeper]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/11/09/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/zookeeper/</url>
      <content type="html"><![CDATA[<p>zkCli.sh -server IP:port</p>
<p>ls(查看当前节点数据),<br>ls2(查看当前节点数据并能看到更新次数等数据) ,<br>create(创建一个节点) ,<br>get(得到一个节点，包含数据和更新次数等数据),<br>set(修改节点)<br>delete(删除一个节点)</p>
<p>四字命令，nc 服务器地址 端口号<br>nc 192.168.193.84 2181</p>
<table>
<thead>
<tr>
<th>ZooKeeper 四字命令</th>
<th>功能描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>conf</td>
<td>输出相关服务配置的详细信息。</td>
</tr>
<tr>
<td>cons</td>
<td>列出所有连接到服务器的客户端的完全的连接 / 会话的详细信息。包括“接受 / 发送”的包数量、会话 id 、操作延迟、最后的操作执行等等信息。</td>
</tr>
<tr>
<td>dump</td>
<td>列出未经处理的会话和临时节点。</td>
</tr>
<tr>
<td>envi</td>
<td>输出关于服务环境的详细信息（区别于 conf 命令）。</td>
</tr>
<tr>
<td>reqs</td>
<td>列出未经处理的请求</td>
</tr>
<tr>
<td>ruok</td>
<td>测试服务是否处于正确状态。如果确实如此，那么服务返回“ imok”，否则不做任何相应。</td>
</tr>
<tr>
<td>stat</td>
<td>输出关于性能和连接的客户端的列表。</td>
</tr>
<tr>
<td>wchs</td>
<td>列出服务器 watch 的详细信息。</td>
</tr>
<tr>
<td>wchc</td>
<td>通过 session 列出服务器 watch 的详细信息，它的输出是一个与watch 相关的会话的列表。</td>
</tr>
<tr>
<td>wchp</td>
<td>通过路径列出服务器 watch 的详细信息。它输出一个与 session 相关的路径。</td>
</tr>
<tr>
<td>mntr</td>
<td>显示zk信息</td>
</tr>
</tbody>
</table>
<h2 id="获取当前zk服务器的serverId"><a href="#获取当前zk服务器的serverId" class="headerlink" title="获取当前zk服务器的serverId"></a>获取当前zk服务器的serverId</h2><p>echo conf|nc 192.168.193.83 2181</p>
<h2 id="获取当前zk服务器的角色，如果为leader，则可以获得follower个数"><a href="#获取当前zk服务器的角色，如果为leader，则可以获得follower个数" class="headerlink" title="获取当前zk服务器的角色，如果为leader，则可以获得follower个数"></a>获取当前zk服务器的角色，如果为leader，则可以获得follower个数</h2><p>echo mntr|nc 192.168.193.85 2181</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[正则表达式]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/11/09/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h2><p>(?:  pattern)是非捕获型括号  匹配pattern，但不捕获匹配结果。<br>(pattern )是捕获型括号。  匹配pattern，匹配pattern并捕获结果,自动获取组号<br>(?<name> pattern )  匹配pattern，  匹配pattern并捕获结果，设置name为组名<br>    使用小括号指定一个子表达式后，匹配这个子表达式的文本(也就是此分组捕获的内容)可以在表达式或其它程序中作进一步的处理。默认情况下，每个捕获组会自动拥有一个组号，规则是：从左向右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推。<br>    如果正则表达式中同时存在普通捕获组和命名捕获组，那么捕获组的编号就要特别注意，编号的规则是先对普通捕获组进行编号，再对命名捕获组进行编号。<br>     为了避免括号太多使编号混乱，也为了避免无用的捕获提高效率，在不需要捕获只需要指定分组的地方就可以使用非捕获型括号。问题里的非捕获型括号就是为此使用的。</name></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jenkins]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/11/09/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/jenkins/</url>
      <content type="html"><![CDATA[<h1 id="jenkins"><a href="#jenkins" class="headerlink" title="jenkins"></a>jenkins</h1><p>[TOC]</p>
<h2 id="启动jenkins指定端口"><a href="#启动jenkins指定端口" class="headerlink" title="启动jenkins指定端口"></a>启动jenkins指定端口</h2><p>java -jar jenkins.war –httpPort=9010</p>
<font color="red"><strong>后台启动的方法</strong></font>

<p>nohup command &gt; myout.file 2&gt;&amp;1 &amp;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kill `ps -ef | grep [j]enkins.war | awk &apos;&#123; print $2 &#125;&apos;`</div></pre></td></tr></table></figure></p>
<h2 id="jenkins中通过execute-shell启动的进程会被杀死的问题"><a href="#jenkins中通过execute-shell启动的进程会被杀死的问题" class="headerlink" title="jenkins中通过execute shell启动的进程会被杀死的问题"></a>jenkins中通过execute shell启动的进程会被杀死的问题</h2><p>[摘要：正在jenkins中设置装备摆设主动更新安排项目时，若是采用用execute shell启动/封闭tomcat，会发明能够举行封闭tomcat，然则没法启动tomcat，固然构建会表现履行乐成，然则检察过程，tomcat是出有启动的]<br>在jenkins中配置自动更新部署项目时，如果采取用execute shell启动/关闭tomcat，会发现可以进行关闭tomcat，但是无法启动tomcat，虽然构建会显示执行成功，但是查看进程，tomcat是没有启动的。这是因为Jenkins默认会在Build结束后Kill掉所有的衍生进程。需要进行以下配置，才能避免此类情况发生:</p>
<ol>
<li>重设环境变量build_id<br>在execute shell输入框中加入BUILD_ID=DONTKILLME,即可防止jenkins杀死启动的tomcat进程</li>
<li>在启动jenkins 的时候禁止jenkins杀死衍生进程<br> 修改/etc/sysconfig/jenkins配置，在JENKINS_JAVA_OPTIONS中加入-Dhudson.util.ProcessTree.disable=true。需要重启jenkins生效<br> 此方法配置一次后，所有的job都无需设置BUILD_ID，就能够防止jenkins杀死启动的tomcat进程</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[scrt 破解和使用]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/11/09/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/scrt/</url>
      <content type="html"><![CDATA[<h1 id="scrt"><a href="#scrt" class="headerlink" title="scrt"></a>scrt</h1><h2 id="linux下破解"><a href="#linux下破解" class="headerlink" title="linux下破解"></a>linux下破解</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Name: xiaobo_l</div><div class="line">Company:www.boll.me</div><div class="line">Serial Number:03-61-166978</div><div class="line">License Key:ABC89D UFDU94 C94CBU 7V17SU ABTUS5 QXX9E5 PF12H6 R62SHC</div><div class="line">Issue Date:12-22-2013</div></pre></td></tr></table></figure>
<h2 id="设置反空闲"><a href="#设置反空闲" class="headerlink" title="设置反空闲"></a>设置反空闲</h2><p>会话选项 –&gt; 终端 –&gt; 反空闲   –&gt; 发送字符串 可以设置，比如发送 \n 、null或其他信息过去，后面可以设置每隔多少秒发送，比如可以3000秒一次，这样可以保证不会掉线</p>
<h2 id="全局会话设置"><a href="#全局会话设置" class="headerlink" title="全局会话设置"></a>全局会话设置</h2><p>如果想应用于所有会话的话，选择全局选项-&gt;默认会话-&gt;编辑默认设置.做上述修改修改就可以全局使用了.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[seafile]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/11/09/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/seafile/</url>
      <content type="html"><![CDATA[<h1 id="seafile"><a href="#seafile" class="headerlink" title="seafile"></a>seafile</h1><h2 id="启动停止服务"><a href="#启动停止服务" class="headerlink" title="启动停止服务"></a>启动停止服务</h2><p>/opt/seafile/seafile-server-6.0.5/seafile.sh stop<br>/opt/seafile/seafile-server-6.0.5/seahub.sh stop</p>
<p>/opt/seafile/seafile-server-6.0.5/seafile.sh start<br>/opt/seafile/seafile-server-6.0.5/seahub.sh start 8123</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java 远程调试]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/11/09/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/java/java/</url>
      <content type="html"><![CDATA[<h2 id="远程调试"><a href="#远程调试" class="headerlink" title="远程调试"></a>远程调试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=2345 Main</div></pre></td></tr></table></figure>
<h2 id="运行jar中的包含main函数的类"><a href="#运行jar中的包含main函数的类" class="headerlink" title="运行jar中的包含main函数的类"></a>运行jar中的包含main函数的类</h2><figure class="highlight java"><figcaption><span>-cp  app.jar  a.b.C </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//其中C是类位于a.b包,C类中包含main</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[tomcat]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/11/09/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/tomcat/</url>
      <content type="html"><![CDATA[<h2 id="远程调试"><a href="#远程调试" class="headerlink" title="远程调试"></a>远程调试</h2><p>Linxu系统: apach/bin/startup.sh开始处中增加如下内容： </p>
<pre><code>1. declare -x CATALINA_OPTS=&quot;-server -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8788&quot;   
</code></pre><p>.Windows系统: apach/bin/startup.bat开始处中增加如下内容： </p>
<pre><code>1. SET CATALINA_OPTS=-server -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8788  
</code></pre><h2 id="tomcat-配置域名到多个工程目录配置"><a href="#tomcat-配置域名到多个工程目录配置" class="headerlink" title="tomcat 配置域名到多个工程目录配置"></a>tomcat 配置域名到多个工程目录配置</h2><p>tomcat server.xml host appbase</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[haproxy]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/11/09/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/haproxy/</url>
      <content type="html"><![CDATA[<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>uname -a 查看linux版本<br>vim -R README   ，查找 ?linux ，N查找下一个，找到linux版本对应target<br>make TARGET=linux2628</p>
<h2 id="ubuntu-apt-get-install-haproxy安装即可"><a href="#ubuntu-apt-get-install-haproxy安装即可" class="headerlink" title="ubuntu apt-get install haproxy安装即可"></a>ubuntu apt-get install haproxy安装即可</h2><h2 id="centos-用yum安装即可"><a href="#centos-用yum安装即可" class="headerlink" title="centos 用yum安装即可"></a>centos 用yum安装即可</h2><p>yum haproxy -y<br>haproxy x86_64 1.5.14-3.el7 base 833 k</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[shell脚本]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/11/09/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/linux/shell%E8%84%9A%E6%9C%AC/</url>
      <content type="html"><![CDATA[<p>cd <code>dirname $0</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/11/09/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/linux/ubuntu/</url>
      <content type="html"><![CDATA[<h2 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h2><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>ssh</td>
<td>客户端</td>
</tr>
<tr>
<td>openssh-server</td>
<td>服务端</td>
</tr>
<tr>
<td>mysql-server</td>
<td></td>
</tr>
<tr>
<td>mysql-client</td>
<td></td>
</tr>
<tr>
<td>wine</td>
<td></td>
</tr>
<tr>
<td>gdebi</td>
<td></td>
</tr>
<tr>
<td>virtualbox</td>
<td>虚拟机</td>
</tr>
<tr>
<td>chrome</td>
<td></td>
</tr>
<tr>
<td>sougou</td>
<td></td>
<td></td>
</tr>
<tr>
<td>wps</td>
<td></td>
</tr>
<tr>
<td>idea</td>
<td></td>
</tr>
<tr>
<td>hadoop</td>
</tr>
</tbody>
</table>
<h2 id="中文字体"><a href="#中文字体" class="headerlink" title="中文字体"></a>中文字体</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install ttf-mscorefonts-installer #微软字体  </div><div class="line">sudo apt-get install xfonts-wqy  #文泉驿-点阵宋体  </div><div class="line">cd ~  </div><div class="line">wget http://www.stchman.com/tools/MS_fonts/tahoma.zip #Tahoma 字体  </div><div class="line">sudo unzip -d /usr/share/fonts/truetype/msttcorefonts ~/tahoma.zip  </div><div class="line">sudo fc-cache -f -v  </div><div class="line">rm -f ~/tahoma.zip  </div><div class="line">sudo fc-cache -f -s -v   #刷新字体缓存</div></pre></td></tr></table></figure>
<h2 id="解压配置"><a href="#解压配置" class="headerlink" title="解压配置"></a>解压配置</h2><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="root下无法输入中文"><a href="#root下无法输入中文" class="headerlink" title="root下无法输入中文"></a>root下无法输入中文</h3><p>/etc/profile中 export XMODIFIERS=@im=fcitx GTK_IM_MODULE=xim</p>
<h3 id="WPS下搜狗输入法不能输入中文"><a href="#WPS下搜狗输入法不能输入中文" class="headerlink" title="WPS下搜狗输入法不能输入中文"></a>WPS下搜狗输入法不能输入中文</h3><p>原因：环境变量未正确设置<br>$ vi /usr/bin/wps<br>在第一行 #!/bin/bash 下添加：<br>export XMODIFIERS=”@im=fcitx”<br>export QT_IM_MODULE=”fcitx”</p>
<p>ppt、excel部分<br>和word一样的方法添加环境变量，只是编辑的文件各不同：<br>$ vi /usr/bin/wpp<br>$ vi /usr/bin/et</p>
<h3 id="idea-root无法输入中文"><a href="#idea-root无法输入中文" class="headerlink" title="idea root无法输入中文"></a>idea root无法输入中文</h3><p>在IDEA的bin目录下的idea.sh文件的前面加上：<br>export XMODIFIERS=@im=fcitx export QT_IM_MODULE=fcitx</p>
<h3 id="无法打开系统设置"><a href="#无法打开系统设置" class="headerlink" title="无法打开系统设置"></a>无法打开系统设置</h3><p>sudo apt-get install unity-control-center</p>
<h3 id="Ubuntu上方边栏不显示时间，有三中可能原因及相应的解决方法："><a href="#Ubuntu上方边栏不显示时间，有三中可能原因及相应的解决方法：" class="headerlink" title="Ubuntu上方边栏不显示时间，有三中可能原因及相应的解决方法："></a>Ubuntu上方边栏不显示时间，有三中可能原因及相应的解决方法：</h3><pre><code>1. 原因：系统设置为了不显示时间。
</code></pre><p>解决方法：右上角小齿轮-&gt;系统设置-&gt;时间和日期-&gt;时钟-&gt;勾选“在菜单栏显示时钟”</p>
<pre><code>2. 原因：显示时间的进程出错了。

3. 解决方法：重新登录，或重启电脑，或使用下述命令：
</code></pre><p>sudo restart lighddm<br>警告：该命令会使所有用户退出登录。</p>
<pre><code>4. 原因：indicator-datetime 被误删了。
</code></pre><p>解决方法：重新安装indicator-datetime。 首先，在确认indicator-datetime确实被误删之后，使用命令sudo apt-get install indicator-datetime 安装。其次，配置日期时间：sudo dpkg-reconfigure –frontend noninteractive tzdata 。最后，重启unity：sudo killall unity-panel-service 。</p>
<h3 id="设置分辨率-xrandr"><a href="#设置分辨率-xrandr" class="headerlink" title="设置分辨率 xrandr"></a>设置分辨率 xrandr</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo xrandr -s 1360x768_60</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[html]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/11/09/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/web/html/</url>
      <content type="html"><![CDATA[<h2 id="事件相应两次的问题"><a href="#事件相应两次的问题" class="headerlink" title="事件相应两次的问题"></a>事件相应两次的问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;</div><div class="line">&lt;script src=&quot;http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;&gt;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">  &lt;label id=&quot;mylabel&quot; &gt;</div><div class="line">  &lt;input type=&quot;checkbox&quot; value=&quot;&quot; level=&quot;$!category.level&quot; data-id=&quot;$!category.id&quot; data-parentId=&quot;$!categoryInfo.id&quot; data-type=&quot;categoryInfoType&quot;&gt;$!category.name</div><div class="line">&lt;/label&gt;</div><div class="line">&lt;div id=&quot;test&quot;&gt;</div><div class="line">　 &lt;input type=&quot;checkbox&quot; name=&quot;abc&quot; id=&quot;abc&quot;/&gt;</div><div class="line">  &lt;label for=&quot;abc&quot;&gt;3423432432432432&lt;/label&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">  $(&quot;#test&quot;).click(function(ev) &#123;</div><div class="line">  console.log(ev.target);</div><div class="line">  &#125;);</div><div class="line">  $(&quot;#mylabel&quot;).click(function(event) &#123;</div><div class="line">console.log(event.target);</div><div class="line">&#125;);</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h2 id="设置textArea-允许拖动方向"><a href="#设置textArea-允许拖动方向" class="headerlink" title="设置textArea 允许拖动方向"></a>设置textArea 允许拖动方向</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;textarea  style=&quot;resize:vertical;&quot;&gt;&lt;/textarea&gt;</div></pre></td></tr></table></figure>
<p>resize的值，可以为：</p>
<ul>
<li>both</li>
<li>vertical</li>
<li>horizontal</li>
<li>none</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jquery]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/11/09/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/web/jquery/</url>
      <content type="html"><![CDATA[<h1 id="jquery"><a href="#jquery" class="headerlink" title="jquery"></a>jquery</h1><p>$(“#id”)<br>$(“.样式”)<br>$(“标签名[属性名=属性值][属性名2=属性值2][属性名3!=属性值3]”)   $(“input[data-type=group_checkbox]”)<br>$(this)<br>$(#id).find(“input”) 查找后代input元素</p>
<p>$(“#addQueueDiv”).show();<br>$(“#addQueueDiv”).hide();</p>
<p>$(“#addQueueDiv”)[0].style.visibility=”visible”<br>$(“#addQueueDiv”)[0].style.visibility=”hidden”</p>
<p>tab切换事件<br>$(document).on(‘shown.bs.tab’, ‘a[data-toggle=”tab”]’, function(e) {<br>   console.log(e.target) // activated tab<br>});</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[velocity]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/11/09/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/web/velocity/</url>
      <content type="html"><![CDATA[<h2 id="velocity-设置模板"><a href="#velocity-设置模板" class="headerlink" title="velocity 设置模板"></a>velocity 设置模板</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#set($layout = &quot;/layout/layout2.vm&quot;)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[springMVC]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/11/09/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/web/springMVC/</url>
      <content type="html"><![CDATA[<h2 id="基于注解的Spring-AOP的配置和使用"><a href="#基于注解的Spring-AOP的配置和使用" class="headerlink" title="基于注解的Spring AOP的配置和使用"></a>基于注解的Spring AOP的配置和使用</h2><p>AOP是OOP的延续，是Aspect Oriented Programming的缩写，意思是面向切面编程。可以通过预编译方式和运行期动态代理实现在不修改源代码的情况下给程序动态统一添加功能的一种技术。AOP实际是GoF设计模式的延续，设计模式孜孜不倦追求的是调用者和被调用者之间的解耦，AOP可以说也是这种目标的一种实现。</p>
<ul>
<li><strong>切面（Aspect）</strong>：官方的抽象定义为“一个关注点的模块化，这个关注点可能会横切多个对象”，在本例中，“切面”就是类TestAspect所关注的具体行为，例如，AServiceImpl.barA()的调用就是切面TestAspect所关注的行为之一。“切面”在ApplicationContext中<aop:aspect>来配置。</aop:aspect></li>
<li><strong>连接点（Joinpoint）</strong> ：程序执行过程中的某一行为，例如，UserService.get的调用或者UserService.delete抛出异常等行为。</li>
<li><strong>通知（Advice）</strong> ：“切面”对于某个“连接点”所产生的动作，例如，TestAspect中对com.spring.service包下所有类的方法进行日志记录的动作就是一个Advice。其中，一个“切面”可以包含多个“Advice”，例如ServiceAspect。</li>
<li><strong>切入点（Pointcut）</strong> ：匹配连接点的断言，在AOP中通知和一个切入点表达式关联。例如，TestAspect中的所有通知所关注的连接点，都由切入点表达式execution(<em> com.spring.service.</em>.*(..))来决定。</li>
<li><strong>目标对象（Target Object）</strong> ：被一个或者多个切面所通知的对象。例如，AServcieImpl和BServiceImpl，当然在实际运行时，Spring AOP采用代理实现，实际AOP操作的是TargetObject的代理对象。</li>
<li><strong>AOP代理（AOP Proxy）</strong> ：在Spring AOP中有两种代理方式，JDK动态代理和CGLIB代理。默认情况下，TargetObject实现了接口时，则采用JDK动态代理，例如，AServiceImpl；反之，采用CGLIB代理，例如，BServiceImpl。强制使用CGLIB代理需要将 <aop:config>的 proxy-target-class属性设为true。</aop:config></li>
</ul>
<p>通知（Advice）类型：</p>
<ul>
<li><strong>前置通知（Before advice）</strong>：在某连接点（JoinPoint）之前执行的通知，但这个通知不能阻止连接点前的执行。ApplicationContext中在<aop:aspect>里面使用<aop:before>元素进行声明。例如，TestAspect中的doBefore方法。</aop:before></aop:aspect></li>
<li><strong>后置通知（After advice）</strong>：当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。ApplicationContext中在<aop:aspect>里面使用<aop:after>元素进行声明。例如，ServiceAspect中的returnAfter方法，所以Teser中调用UserService.delete抛出异常时，returnAfter方法仍然执行。</aop:after></aop:aspect></li>
<li><strong>返回后通知（After return advice）</strong>：在某连接点正常完成后执行的通知，不包括抛出异常的情况。ApplicationContext中在<aop:aspect>里面使用<after-returning>元素进行声明。</after-returning></aop:aspect></li>
<li><strong>环绕通知（Around advice）</strong>：包围一个连接点的通知，类似Web中Servlet规范中的Filter的doFilter方法。可以在方法的调用前后完成自定义的行为，也可以选择不执行。ApplicationContext中在<aop:aspect>里面使用<aop:around>元素进行声明。例如，ServiceAspect中的around方法。</aop:around></aop:aspect></li>
<li><strong>抛出异常后通知（After throwing advice）</strong>：在方法抛出异常退出时执行的通知。ApplicationContext中在<aop:aspect>里面使用<aop:after-throwing>元素进行声明。例如，ServiceAspect中的returnThrow方法。</aop:after-throwing></aop:aspect></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[playframework]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/11/09/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/web/playframework/</url>
      <content type="html"><![CDATA[<p>目录结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">web_app                         根目录               </div><div class="line">|   sbt                         SBT Unix 批处理脚本用于启动sbt-launch.jar </div><div class="line">|   sbt.bat                     SBT Windows 批处理脚本用于启动sbt-launch.jar </div><div class="line">|   sbt-launch.jar              SBT 启动的Java可执行类库</div><div class="line">|</div><div class="line">+---app                         Play Web 应用全部代码所在目录</div><div class="line">|   |</div><div class="line">|   +---models                  模型代码所在目录</div><div class="line">|   |       Message.scala       留言板例程模型代码</div><div class="line">|   |</div><div class="line">|   +---controllers             控制器代码所在目录</div><div class="line">|   |       Application.scala   默认控制器代码</div><div class="line">|   |</div><div class="line">|   \---views                   视图（Play Scala HTML模板） 代码所在目录</div><div class="line">|           main.scala.html     主模板文件</div><div class="line">|           index.scala.html    首页模板文件</div><div class="line">|           msgboard.scala.html 留言板例程模板文件</div><div class="line">|</div><div class="line">+---conf                        Play 配置文件所在目录</div><div class="line">|       application.conf        应用配置文件</div><div class="line">|       routes                  应用入口路由文件，所有的HTTP请求将通过该文件转发到指定的Scala对象处理</div><div class="line">|</div><div class="line">+---logs                        日志目录</div><div class="line">|       application.log         应用运行日志</div><div class="line">|</div><div class="line">+---project                     SBT工程文件</div><div class="line">|       build.properties        保存所需的SBT版本信息，通常无需更改</div><div class="line">|       Build.scala             主要的工程配置文件</div><div class="line">|       plugins.sbt             告知SBT本工程所需要的插件以及下载位置</div><div class="line">|</div><div class="line">+---public                      存储一切直接发送给浏览器的资源文件</div><div class="line">|   |</div><div class="line">|   +---images                  图像文件，如JPEG、PNG、GIF等</div><div class="line">|   |</div><div class="line">|   +---javascripts             JavaScript脚本文件</div><div class="line">|   |</div><div class="line">|   \---stylesheets             CSS样式表文件</div><div class="line">|</div><div class="line">\---target                      存放编译后的可执行代码和编译时的中间代码</div></pre></td></tr></table></figure></p>
<p><img src="https://www.playframework.com/documentation/1.1.1/images/diagrams_path" alt=""></p>
<p>执行play,进入play命令行后，执行:<br>idea with-sources=yes 或者 eclipse with-source=true.生成对应的工程文件，之后，可以用eclipse或idea导入工程； </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vim]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/11/09/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/vim/</url>
      <content type="html"><![CDATA[<p>vim设置粘贴可以500行</p>
<pre><code>1. :set viminfo=&apos;1000,&lt;500  
</code></pre><p>整体下移：ctrl + e<br>整体上移 : ctrl + y</p>
<p>显示行号：set nu</p>
<p>vim配置文件：/etc/vim/vimrc</p>
<p>查找字符串 ?内容    N下一个   n上一个</p>
<h2 id="配置文件位置"><a href="#配置文件位置" class="headerlink" title="配置文件位置"></a>配置文件位置</h2><p>vim /etc/vimrc</p>
<h2 id="设置粘贴模式"><a href="#设置粘贴模式" class="headerlink" title="设置粘贴模式"></a>设置粘贴模式</h2><p> 粘贴模式可以不带缩进粘贴</p>
<p> <code>set paste</code></p>
<p> <code>set nopaste</code></p>
<p> 也可以在.vimrc中设置切换的快捷键，比如设置F9，则可以在.vimrc中加入：<br> <code>set pastetoggle=&lt;F9&gt;</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[xss攻击]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/11/09/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/web/xss%E6%94%BB%E5%87%BB_%E8%B7%A8%E5%9F%9F%E6%94%BB%E5%87%BB/</url>
      <content type="html"><![CDATA[<h2 id="xss攻击"><a href="#xss攻击" class="headerlink" title="xss攻击"></a>xss攻击</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/11/09/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/</url>
      <content type="html"><![CDATA[<p>[TOC]</p>
<h2 id="mysql启动服务"><a href="#mysql启动服务" class="headerlink" title="mysql启动服务"></a>mysql启动服务</h2><h3 id="启动mysql："><a href="#启动mysql：" class="headerlink" title="启动mysql："></a>启动mysql：</h3><p>方式一：sudo /etc/init.d/mysql start<br>方式二：sudo start mysql<br>方式三：sudo service mysql start</p>
<h3 id="停止mysql："><a href="#停止mysql：" class="headerlink" title="停止mysql："></a>停止mysql：</h3><p>方式一：sudo /etc/init.d/mysql stop<br>方式二：sudo stop mysql<br>方式san：sudo service mysql stop</p>
<h3 id="重启mysql："><a href="#重启mysql：" class="headerlink" title="重启mysql："></a>重启mysql：</h3><p>方式一：sudo/etc/init.d/mysql restart<br>方式二：sudo restart mysql<br>方式三：sudo service mysql restart</p>
<pre><code>* 以root用户登入
</code></pre><p>mysql -u root -p</p>
<h3 id="创建普通用户"><a href="#创建普通用户" class="headerlink" title="创建普通用户"></a>创建普通用户</h3><p>create user ‘salt’@’localhost’;<br>set password for ‘salt’@’localhost’ = password(‘salt’); </p>
<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>create database UGDAP;</p>
<h3 id="显示所有数据库"><a href="#显示所有数据库" class="headerlink" title="显示所有数据库"></a>显示所有数据库</h3><p>show databases;</p>
<h3 id="为用户salt授予数据库UGDAP下所有表打所有权限"><a href="#为用户salt授予数据库UGDAP下所有表打所有权限" class="headerlink" title="为用户salt授予数据库UGDAP下所有表打所有权限"></a>为用户salt授予数据库UGDAP下所有表打所有权限</h3><p>grant all privileges on UGDAP.* to salt@localhost identified by ‘salt’;<br>flush privileges;</p>
<h3 id="以salt用户登入（远程登入）"><a href="#以salt用户登入（远程登入）" class="headerlink" title="以salt用户登入（远程登入）"></a>以salt用户登入（远程登入）</h3><p>mysql -u salt -psalt<br>mysql -h 192.168.200.213 -P 3306 -usalt -psalt</p>
<h3 id="使用指定数据库"><a href="#使用指定数据库" class="headerlink" title="使用指定数据库"></a>使用指定数据库</h3><p>use UGDAP;</p>
<h3 id="查看所有表"><a href="#查看所有表" class="headerlink" title="查看所有表"></a>查看所有表</h3><p>show tables; </p>
<h3 id="删除库和表"><a href="#删除库和表" class="headerlink" title="删除库和表"></a>删除库和表</h3><p>drop database 库名;<br>drop table 表名； </p>
<h3 id="将表中记录清空"><a href="#将表中记录清空" class="headerlink" title="将表中记录清空"></a>将表中记录清空</h3><p>delete from 表名; </p>
<h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p>create table tb_emp1<br>(<br> id  INT(11),<br> name VARCHAR(25),<br> deptid  INT (11),<br> salary FLOAT<br>);</p>
<h3 id="显示表结构"><a href="#显示表结构" class="headerlink" title="显示表结构"></a>显示表结构</h3><p>describe tb_emp1;</p>
<h3 id="导入sql-执行sql脚本（shell中以及mysql中）"><a href="#导入sql-执行sql脚本（shell中以及mysql中）" class="headerlink" title="导入sql/执行sql脚本（shell中以及mysql中）"></a>导入sql/执行sql脚本（shell中以及mysql中）</h3><p>mysql db_name &lt; text_file<br>mysql db_name -u username -p &lt; text_file  </p>
<p>mysql&gt; source file_name<br>mysql&gt; . file_name</p>
<h3 id="导出数据库"><a href="#导出数据库" class="headerlink" title="导出数据库"></a>导出数据库</h3><p>mysqldump -h 192.168.200.213 -P 3306 -usalt -psalt –default-character-set=utf8 UGDAP&gt;./UGDAP.sql</p>
<h3 id="卸载mysql"><a href="#卸载mysql" class="headerlink" title="卸载mysql"></a>卸载mysql</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">sudo rm /var/lib/mysql/ -R</div><div class="line"></div><div class="line">//删除mysql的数据文件</div><div class="line"></div><div class="line"></div><div class="line">sudo rm /etc/mysql/ -R</div><div class="line"></div><div class="line">//删除mqsql的配置文件</div><div class="line"></div><div class="line">sudo apt-get autoremove mysql* --purge</div><div class="line"></div><div class="line">sudo apt-get remove apparmor</div><div class="line"></div><div class="line">sudo apt-get autoremove</div><div class="line">1 sudo apt-get autoremove --purge mysql-server-5.0</div><div class="line">2 sudo apt-get remove mysql-server</div><div class="line">3 sudo apt-get autoremove mysql-server</div><div class="line">4 sudo apt-get remove mysql-common (非常重要)</div><div class="line"></div><div class="line">dpkg -l |grep ^rc|awk &apos;&#123;print $2&#125;&apos; |sudo xargs dpkg -P</div></pre></td></tr></table></figure>
<pre><code>* 安装 mysql
</code></pre><p>1 sudo apt-get install mysql-server<br>2 sudo apt-get install mysql-client<br>3 sudo apt-get install php5-mysql(安装php5-mysql 是将php和mysql连接起来 ) </p>
<p>一旦安装完成，MySQL 服务器应该自动启动。您可以在终端提示符后运行以下命令来检查 MySQL 服务器是否正在运行：<br>1 sudo netstat -tap | grep mysql</p>
<p>当您运行该命令时，您可以看到类似下面的行：<br>tcp 0 0 localhost.localdomain:mysql <em>:</em> LISTEN -如果服务器不能正常运行，您可以通过下列命令启动它：</p>
<p>1 sudo /etc/init.d/mysql restart</p>
<h2 id="修改root用户密码"><a href="#修改root用户密码" class="headerlink" title="修改root用户密码"></a>修改root用户密码</h2><p>###第一步：修改Mysql配置文件<br>[root@liama01 ~]# vi /etc/my.cnf<br>在mysqld下，加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">skip-grant-tables</div><div class="line">skip-networking</div></pre></td></tr></table></figure></p>
<p>###第二步：重启Mysql后使用mysql -uroot -p 命令登入Mysql并修改密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">service mysqld restart</div><div class="line">mysql -uroot -p 回车</div><div class="line"></div><div class="line">mysql&gt; use mysql</div><div class="line">mysql&gt; update user set password=PASSWORD(&apos;root&apos;) WHERE user=&quot;root&quot;;</div><div class="line">mysql&gt; flush privileges;</div></pre></td></tr></table></figure></p>
<p>###第三步：去掉跳过，并重启服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vi /etc/my.cnf</div><div class="line">去掉skip-grant-tables和skip-networking</div><div class="line">service mysqld restart</div></pre></td></tr></table></figure>
<p>###第四步：重置密码<br>如果不重置会报错</p>
<p>ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.<br>执行重新设置密码<br>mysql&gt; ALTER USER ‘root’@’localhost’ IDENTIFIED BY ‘<strong><em>**</em></strong>‘</p>
<h2 id="一条命令登录mysql-执行sql语句，然后退出"><a href="#一条命令登录mysql-执行sql语句，然后退出" class="headerlink" title="一条命令登录mysql 执行sql语句，然后退出"></a>一条命令登录mysql 执行sql语句，然后退出</h2><p>mysql -h ip -uuser -ppwd -e”select * from bdpops.t_static_data limit 1”</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mongodb]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/11/09/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/</url>
      <content type="html"><![CDATA[<h2 id="启动mongodb"><a href="#启动mongodb" class="headerlink" title="启动mongodb"></a>启动mongodb</h2><p>./mongod –dbpath ../dbpath/ –logpath ../logs/mongodb.log –logappend &amp;     –fork  </p>
<p>show dbs</p>
<h2 id="使用数据库mydb"><a href="#使用数据库mydb" class="headerlink" title="使用数据库mydb"></a>使用数据库mydb</h2><p>use mydb</p>
<h2 id="显示表"><a href="#显示表" class="headerlink" title="显示表"></a>显示表</h2><p>show collections</p>
<h2 id="查看表foo下的记录"><a href="#查看表foo下的记录" class="headerlink" title="查看表foo下的记录"></a>查看表foo下的记录</h2><p>db.foo.find()   </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql sql语法]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/11/09/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql%20%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="mysql-语句"><a href="#mysql-语句" class="headerlink" title="mysql 语句"></a>mysql 语句</h1><h2 id="返回players表中town列所有数据项打集合以’-’分割的集合"><a href="#返回players表中town列所有数据项打集合以’-’分割的集合" class="headerlink" title="返回players表中town列所有数据项打集合以’,’分割的集合"></a>返回players表中town列所有数据项打集合以’,’分割的集合</h2><p>SELECT group_concat(town) FROM <code>players</code> group by town</p>
<h2 id="获取符合条件的记录个数，表头为count"><a href="#获取符合条件的记录个数，表头为count" class="headerlink" title="获取符合条件的记录个数，表头为count"></a>获取符合条件的记录个数，表头为count</h2><p>select count(*) as count from t_cluster_config_xml where cluster_name = ‘alto’</p>
<h2 id="如果存在则不插入"><a href="#如果存在则不插入" class="headerlink" title="如果存在则不插入"></a>如果存在则不插入</h2><p>insert into t_cluster_config_xml(a,b)<br>select a,b from DUAL WHERE NOT EXISTS(SELECT a FROM t_cluster_config_xml WHERE a = ‘a’);</p>
<h2 id="建表字符格式及长度"><a href="#建表字符格式及长度" class="headerlink" title="建表字符格式及长度"></a>建表字符格式及长度</h2><ul>
<li><p>CHAR(M) [BINARY]<br>一个定长字符串，当存储时，总是是用空格填满右边到指定的长度。M的范围是1 ～ 255个字符。当值被检索时，空格尾部被删除。CHAR值根据缺省字符集以大小写不区分的方式排序和比较，除非给出BINARY关键词。NATIONAL CHAR（短形式NCHAR)是ANSI SQL的方式来定义CHAR列应该使用缺省字符集。这是MySQL的缺省。CHAR是CHARACTER的一个缩写。</p>
</li>
<li><p>TINYBLOB</p>
</li>
<li>TINYTEXT<br>一个BLOB或TEXT列，最大长度为255(2^8-1)个字符。</li>
<li>BLOB</li>
<li><p>TEXT<br>一个BLOB或TEXT列，最大长度为65535(2^16-1)个字符。</p>
</li>
<li><p>MEDIUMBLOB</p>
</li>
<li><p>MEDIUMTEXT<br>一个BLOB或TEXT列，最大长度为16777215(2^24-1)个字符。</p>
</li>
<li><p>LONGBLOB</p>
</li>
<li><p>LONGTEXT<br>一个BLOB或TEXT列，最大长度为4294967295(2^32-1)个字符。</p>
</li>
</ul>
<h2 id="数值类型长度-M-的含义"><a href="#数值类型长度-M-的含义" class="headerlink" title="数值类型长度(M)的含义"></a>数值类型长度(M)的含义</h2><p><a href="http://www.cnblogs.com/stringzero/p/5707467.html" target="_blank" rel="external">原文</a><br>m 不是表示的数据长度，而是表示数据在显示时显示的最小长度。<br>当字符长度超过(m)时，相当于啥都没发生；<br>当字符长度小于(m)时，就需要指定拿某个字符来填充，比如zerofill（表示用0填充），<br>设置tinyint(2) zerofill 你插入1时他会显示01；设置tinyint(4) zerofill 你插入1时他会显示0001。<br>所以，没有zerofill，(m)就是无用的。</p>
<p><strong><em>真相在这里</em></strong></p>
<table>
<thead>
<tr>
<th>类型</th>
<th>长度</th>
<th>范围</th>
<th>名称</th>
</tr>
</thead>
<tbody>
<tr>
<td>TINYINT</td>
<td>1字节</td>
<td>(-128，127) (0，255)</td>
<td>小整数值</td>
</tr>
<tr>
<td>SMALLINT</td>
<td>2 字节</td>
<td>( -2^15 ：-32 768，2^15 - 1：32 767) (0，65 535)</td>
<td>大整数值</td>
</tr>
<tr>
<td>MEDIUMINT</td>
<td>3 字节</td>
<td>(-8 388 608，8 388 607) (0，16 777 215)</td>
<td>大整数值</td>
</tr>
<tr>
<td>INT或INTEGER</td>
<td>4 字节</td>
<td>(-2^31， 2^31 - 1) (0，4 294 967 295)</td>
<td>大整数值</td>
</tr>
<tr>
<td>BIGINT</td>
<td>8 字节</td>
<td>(-2^63，2^63-1) (0，18 446 744 073 709 551 615)</td>
<td>极大整数值</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/11/09/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/git/</url>
      <content type="html"><![CDATA[<h2 id="git-push-origin-master报错"><a href="#git-push-origin-master报错" class="headerlink" title="git push origin master报错"></a>git push origin master报错</h2><p>fatal: could not read Username for ‘<a href="https://github.com" target="_blank" rel="external">https://github.com</a>‘: No such file or directo<br>原因使用https方式的时候 在git remote add origin 的https url 里面没有用户名和密码<br>修改为如下：<br>git remote add origin <a href="https://{username}:{password}@github.com/{username}/project.git" target="_blank" rel="external">https://{username}:{password}@github.com/{username}/project.git</a><br><a href="https://github.com/kemayo/sublime-text-git/issues/176" target="_blank" rel="external">https://github.com/kemayo/sublime-text-git/issues/176</a><br>或者直接修改 .git/config 隐藏文件 为git remote add origin <a href="https://{username}:{password}@github.com/{username}/project.git" target="_blank" rel="external">https://{username}:{password}@github.com/{username}/project.git</a> 格式</p>
<h2 id="显示当前分支"><a href="#显示当前分支" class="headerlink" title="显示当前分支"></a>显示当前分支</h2><p>git branch</p>
<h2 id="显示远程信息"><a href="#显示远程信息" class="headerlink" title="显示远程信息"></a>显示远程信息</h2><p>git remote -v</p>
<h2 id="强制回退到master分支"><a href="#强制回退到master分支" class="headerlink" title="强制回退到master分支"></a>强制回退到master分支</h2><p>取回远程主机某个分支的更新，再与本地的指定分支合并<br>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;<br>git pull origin master:master -f</p>
<h2 id="显示git状态"><a href="#显示git状态" class="headerlink" title="显示git状态"></a>显示git状态</h2><p>git status</p>
<p>git branch * master</p>
<h2 id="将master分支合并到当前分支"><a href="#将master分支合并到当前分支" class="headerlink" title="将master分支合并到当前分支"></a>将master分支合并到当前分支</h2><p>git merge master</p>
<h2 id="将远程master的修改合并到本地mbl分支。"><a href="#将远程master的修改合并到本地mbl分支。" class="headerlink" title="将远程master的修改合并到本地mbl分支。"></a>将远程master的修改合并到本地mbl分支。</h2><p>git pull origin master:master -f<br>git add .<br> git commit -m “test”<br>git pull origin master:master -f<br>git branch * master<br>git checkout mbl<br>git pull<br>git merge master<br> git push</p>
<h2 id="取消commit-和-pull"><a href="#取消commit-和-pull" class="headerlink" title="取消commit 和 pull"></a>取消commit 和 pull</h2><p>git reset –hard <commit_id><br>git push origin HEAD –force</commit_id></p>
<h2 id="git-更换仓库"><a href="#git-更换仓库" class="headerlink" title="git 更换仓库"></a>git 更换仓库</h2><ol>
<li>从原地址克隆一份裸版本库，比如原本托管于 GitHub<br>git clone –bare git://github.com/username/project.git</li>
<li>然后到新的 Git 服务器上创建一个新项目，比如 GitCafe。</li>
<li><p>以镜像推送的方式上传代码到 GitCafe 服务器上。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd project.git</div><div class="line">git push --mirror git@gitcafe.com/username/newproject.git</div></pre></td></tr></table></figure>
</li>
<li><p>先查看remote的名字</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -r</div></pre></td></tr></table></figure>
</li>
<li><p>假设你的remote是origin，用git remote set_url 更换地址</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote set-url origin remote_git_address</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -am &quot;提交说明&quot;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[树莓派安装后需要做的几件事]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/11/09/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E6%A0%91%E8%8E%93%E6%B4%BE/%E5%AE%89%E8%A3%85%E5%90%8E/</url>
      <content type="html"><![CDATA[<h1 id="安装后"><a href="#安装后" class="headerlink" title="安装后"></a>安装后</h1><h2 id="ssh登录"><a href="#ssh登录" class="headerlink" title="ssh登录"></a>ssh登录</h2><h3 id="查看路由器dhcp列表，获取ip，使用scrt登录"><a href="#查看路由器dhcp列表，获取ip，使用scrt登录" class="headerlink" title="查看路由器dhcp列表，获取ip，使用scrt登录"></a>查看路由器dhcp列表，获取ip，使用scrt登录</h3><h3 id="修改-etc-apt-sources-list"><a href="#修改-etc-apt-sources-list" class="headerlink" title="修改/etc/apt/sources.list"></a>修改/etc/apt/sources.list</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">deb http://mirrors.aliyun.com/raspbian/raspbian/ jessie main non-free contrib rpi</div><div class="line">deb-src http://mirrors.aliyun.com/raspbian/raspbian/ jessie main non-free contrib rpi</div></pre></td></tr></table></figure>
<h2 id="远程桌面"><a href="#远程桌面" class="headerlink" title="远程桌面"></a>远程桌面</h2><p>安装远程桌面，ubuntu下需要使用xrdesktop连接 ，比windows远程桌面慢<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install xrdp</div><div class="line">sudo apt-get install vnc4server tightvncserver</div></pre></td></tr></table></figure></p>
<h2 id="安装字体"><a href="#安装字体" class="headerlink" title="安装字体"></a>安装字体</h2><p>sudo apt-get install ttf-wqy-zenhei</p>
<h2 id="安装输入法"><a href="#安装输入法" class="headerlink" title="安装输入法"></a>安装输入法</h2><p>sudo apt-get install fcitx fcitx-googlepinyin fcitx-module-cloudpinyin fcitx-sunpinyin</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[树莓派常用命令]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/11/09/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E6%A0%91%E8%8E%93%E6%B4%BE/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="树莓派常用命令"><a href="#树莓派常用命令" class="headerlink" title="树莓派常用命令"></a>树莓派常用命令</h1><h2 id="以某个用户身份运行程序"><a href="#以某个用户身份运行程序" class="headerlink" title="以某个用户身份运行程序"></a>以某个用户身份运行程序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">runuser -l pi -c &quot;command&quot;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[nginx]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/11/09/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/nginx/</url>
      <content type="html"><![CDATA[<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>nginx </p>
<h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><p>nginx -s reload</p>
<h2 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h2><p>nginx -s stop</p>
<h2 id="修改端口"><a href="#修改端口" class="headerlink" title="修改端口"></a>修改端口</h2><p>/etc/nginx/conf/nginx.conf</p>
<h2 id="查看端口占用"><a href="#查看端口占用" class="headerlink" title="查看端口占用"></a>查看端口占用</h2><p>lsof -i tcp:80<br>lsof -i tcp:8999</p>
<h2 id="检测配置文件是否正确，可以查看配置文件位置"><a href="#检测配置文件是否正确，可以查看配置文件位置" class="headerlink" title="检测配置文件是否正确，可以查看配置文件位置"></a>检测配置文件是否正确，可以查看配置文件位置</h2><p>sudo nginx -t</p>
<h2 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h2><p>sudo nginx -V</p>
<h2 id="配置文件说明"><a href="#配置文件说明" class="headerlink" title="配置文件说明"></a>配置文件说明</h2><p>server_namn : 域名;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux命令]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/11/09/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/linux/linux%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>#linux 常用命令</p>
<pre><code>* history |grep scp
* tail -f log/UGDAP.log
* 只显示文件名：
</code></pre><p>ls -l | grep ^[^d] | awk ‘{print $8}’<br>只显示文件夹名：<br>ls -l |grep ^d | awk ‘{print $8}’ 或者是 ls -d */</p>
<h2 id="恢复rm删除的文件"><a href="#恢复rm删除的文件" class="headerlink" title="恢复rm删除的文件"></a>恢复rm删除的文件</h2><h3 id="显示所删除的文件所在的分区"><a href="#显示所删除的文件所在的分区" class="headerlink" title="显示所删除的文件所在的分区"></a>显示所删除的文件所在的分区</h3><p>df -T /home</p>
<h3 id="用debugFS查找被删除文件的inode号"><a href="#用debugFS查找被删除文件的inode号" class="headerlink" title="用debugFS查找被删除文件的inode号"></a>用debugFS查找被删除文件的inode号</h3><p>sudo debugfs<br>debugfs&gt;open /dev/sda5<br>debugfs&gt;ls -d /home/mbl/study<br>尖括号中的是inode</p>
<h3 id="恢复inode"><a href="#恢复inode" class="headerlink" title="恢复inode"></a>恢复inode</h3><p>extundelete ${dev_describer} –restore-inode ${inode} </p>
<h3 id="如果知道被删除文件的完整的路径，直接恢复"><a href="#如果知道被删除文件的完整的路径，直接恢复" class="headerlink" title="如果知道被删除文件的完整的路径，直接恢复"></a>如果知道被删除文件的完整的路径，直接恢复</h3><p>extundelete ${deb_describer} –restore-file ${path}  </p>
<h2 id="shell脚本常用变量"><a href="#shell脚本常用变量" class="headerlink" title="shell脚本常用变量"></a>shell脚本常用变量</h2><p>$0: shell或shell脚本的名字<br>$*:以一对双引号给出参数列表<br>$@:将各个参数分别加双引号返回<br>$#:参数的个数<br>$_:代表上一个命令的最后一个参数<br>$$:代表所在命令的PID<br>$!:代表最后执行的后台命令的PID<br>$?:代表上一个命令执行后的退出状态</p>
<h2 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h2><p> curl -x 172.22.91.78:80 <a href="http://172.16.172.95:19888/ws/v1/history/mapreduce/jobs/job_1470405196301_64273|python" target="_blank" rel="external">http://172.16.172.95:19888/ws/v1/history/mapreduce/jobs/job_1470405196301_64273|python</a> -m json.tool&gt;job_1470405196301_64273.json</p>
<h2 id="显示当前版本"><a href="#显示当前版本" class="headerlink" title="显示当前版本"></a>显示当前版本</h2><p>cat /proc/version<br>uname -a<br>cat /etc/<em>release</em></p>
<h2 id="显示ip"><a href="#显示ip" class="headerlink" title="显示ip"></a>显示ip</h2><p>hostname -i<br>ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6 | awk ‘{print $2}’ | tr -d “addr:”<br>ifconfig enp0s25|grep inet|grep -v 127.0.0.1|grep -v inet6 | awk ‘{print $2}’ | tr -d “addr:”</p>
<h2 id="测试端口是否通"><a href="#测试端口是否通" class="headerlink" title="测试端口是否通"></a>测试端口是否通</h2><p>telnet 172.22.91.34 8087</p>
<h2 id="查看端口是否被占用"><a href="#查看端口是否被占用" class="headerlink" title="查看端口是否被占用"></a>查看端口是否被占用</h2><p>netstat -tunlp |grep 80<br>lsof -i 80</p>
<p>/bin/bash^M: 解释器错误: 没有那个文件或目录<br>sed -i ‘s/\r$//‘ check_tool.sh</p>
<h2 id="后台启动进程，重定向输出到文件"><a href="#后台启动进程，重定向输出到文件" class="headerlink" title="后台启动进程，重定向输出到文件"></a>后台启动进程，重定向输出到文件</h2><p>nohup command &gt; myout.file 2&gt;&amp;1 &amp;</p>
<h2 id="杀进程"><a href="#杀进程" class="headerlink" title="杀进程"></a>杀进程</h2><p>ps -ef | grep tomcat | awk ‘{print $2}’ | xargs kill -9<br>或<br>kill <code>ps -ef | grep [j]enkins.war | awk &#39;{ print $2 }&#39;</code><br>虽然提示没有找到进程pid，但已经杀掉了</p>
<h2 id="开机自动挂载分区"><a href="#开机自动挂载分区" class="headerlink" title="开机自动挂载分区"></a>开机自动挂载分区</h2><p>用blkid列出分区uuid和type<br>sudo  blkid<br>接下来修改自动挂载的配置文件：<br>sudo vim /etc/fstab<br>增加一行<br>UUID=11263962-9715-473f-9421-0b604e895aaa /data       ext4    defaults 0     1</p>
<h2 id="zip解压中文乱码"><a href="#zip解压中文乱码" class="headerlink" title="zip解压中文乱码"></a>zip解压中文乱码</h2><p>ubuntu下  unzip -O CP936  xxx.zip -d exdir</p>
<h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><p>home目录不能有其它用户写权限<br>/root  </p>
<p>.ssh 只能是 700</p>
<p>linux权限<br>777 rwxrwxrwx  （所有者，本组用户，其它用户）rwx=读，写，执行</p>
<h2 id="ssh-copy-id"><a href="#ssh-copy-id" class="headerlink" title="ssh-copy-id"></a>ssh-copy-id</h2><h2 id="设置root密码"><a href="#设置root密码" class="headerlink" title="设置root密码"></a>设置root密码</h2><p>sudo passwd root</p>
<h2 id="在任务栏显示网速"><a href="#在任务栏显示网速" class="headerlink" title="在任务栏显示网速"></a>在任务栏显示网速</h2><p>sudo add-apt-repository ppa:nilarimogard/webupd8<br>sudo apt-get update<br>sudo apt-get install indicator-netspeed</p>
<h2 id="设置显示桌面快捷键"><a href="#设置显示桌面快捷键" class="headerlink" title="设置显示桌面快捷键"></a>设置显示桌面快捷键</h2><p>sudo apt-get install compizconfig-settings-manager<br>ccsm</p>
<h2 id="KWPlayer-酷我音乐盒"><a href="#KWPlayer-酷我音乐盒" class="headerlink" title="KWPlayer 酷我音乐盒"></a>KWPlayer 酷我音乐盒</h2><h2 id="Iptux-—-局域网聊天工具-飞鸽Linux版"><a href="#Iptux-—-局域网聊天工具-飞鸽Linux版" class="headerlink" title="Iptux — 局域网聊天工具(飞鸽Linux版)"></a>Iptux — 局域网聊天工具(飞鸽Linux版)</h2><p>sudo apt-get install iptux</p>
<h2 id="System-Load-Indicator-系统状态指示器）"><a href="#System-Load-Indicator-系统状态指示器）" class="headerlink" title="System Load Indicator ( 系统状态指示器）"></a>System Load Indicator ( 系统状态指示器）</h2><p>sudo add-apt-repository ppa:indicator-multiload/stable-daily<br>sudo apt-get update<br>sudo apt-get install indicator-multiload</p>
<h2 id="XBMC（媒体中心）"><a href="#XBMC（媒体中心）" class="headerlink" title="XBMC（媒体中心）"></a>XBMC（媒体中心）</h2><p>XBMC（媒体中心）<br>sudo add-apt-repository ppa:team-xbmc/ppa<br>sudo apt-get update<br>sudo apt-get install xbmc</p>
<h2 id="VMware-Workstation"><a href="#VMware-Workstation" class="headerlink" title="VMware Workstation"></a>VMware Workstation</h2><p>安装方法（包含下载、安装、激活、序列号）<br><a href="http://www.kashu.org/1024.html" target="_blank" rel="external">http://www.kashu.org/1024.html</a></p>
<h2 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h2><p><a href="http://ppa.launchpad.net/wireshark-dev/stable/ubuntu/pool/main/w/wireshark/" target="_blank" rel="external">http://ppa.launchpad.net/wireshark-dev/stable/ubuntu/pool/main/w/wireshark/</a><br>ppa:wireshark-dev/stable</p>
<p>.tar.gz     格式解压为          tar   -zxvf   xx.tar.gz<br>.tar.bz2   格式解压为          tar   -jxvf    xx.tar.bz2</p>
<h2 id="查看linux版本"><a href="#查看linux版本" class="headerlink" title="查看linux版本"></a>查看linux版本</h2><p>rpm -qa|grep kernel</p>
<p>中文Linux 常用的locale是zh_CN.gb2312，zh_CN.gbk，zh_CN.gb18030 和 zh_CN.UTF-8 。通过如下命令可以查询系统的locale：#echo $LANG</p>
<p>fdisk -l </p>
<p>mkdir /mnt/usb<br>mount命令格式：mount [-参数] [设备名称] [挂载点] [其他参数]<br>mount /dev/sdb1 /mnt/usb<br>umount /dev/sdb1</p>
<h2 id="改变用户组和用户"><a href="#改变用户组和用户" class="headerlink" title="改变用户组和用户"></a>改变用户组和用户</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">基本语法：</div><div class="line">chown [-R] 账号名称 文件或目录</div><div class="line">chown [-R] 账号名称:用户组名称 文件或目录</div><div class="line">参数：</div><div class="line">-R : 进行递归( recursive )的持续更改，即连同子目录下的所有文件、目录</div><div class="line">都更新成为这个用户组。常常用在更改某一目录的情况。</div><div class="line">示例1：</div><div class="line">[root@localhost home]# touch testfile //由 root 用户创建文件</div><div class="line">[root@localhost home]# ls testfile –l</div></pre></td></tr></table></figure>
<h2 id="查看文件夹下容量"><a href="#查看文件夹下容量" class="headerlink" title="查看文件夹下容量"></a>查看文件夹下容量</h2><p>du -ah –max-depth=1</p>
<h2 id="配置ssh-超时空闲时间"><a href="#配置ssh-超时空闲时间" class="headerlink" title="配置ssh 超时空闲时间"></a>配置ssh 超时空闲时间</h2><p>服务器配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/etc/profile 中的配置，增加一个参数TMOUT=6000       //100分钟，应该够用了</div><div class="line">echo &quot;TMOUT=6000 &quot; &gt;&gt;/etc/profile</div><div class="line">source /etc/profile   //立即生效</div></pre></td></tr></table></figure></p>
<p>客户端配置:<br>方法很简单，只需在客户端电脑上编辑（需要root权限）/etc/ssh/ssh_config，并添加如下一行：<br><code>ServerAliveInterval 60</code></p>
<p>服务器端设置:</p>
<p>如果有相应的权限，也可以在服务器端设置，即编辑/etc/ssh/sshd_config，并添加：<br><code>ClientAliveInterval 60</code></p>
<p>重启SSH服务器后该项设置会生效。每一个连接到此服务器上的客户端都会受其影响。应注意启用该功能后，安全性会有一定下降（比如忘记登出时……）</p>
<h2 id="Linux常见问题解答–如何修复”tar：由于前一个错误导致于失败状态中退出”"><a href="#Linux常见问题解答–如何修复”tar：由于前一个错误导致于失败状态中退出”" class="headerlink" title="Linux常见问题解答–如何修复”tar：由于前一个错误导致于失败状态中退出”"></a>Linux常见问题解答–如何修复”tar：由于前一个错误导致于失败状态中退出”</h2><p>Exiting with failure status due to previous errors<br>去掉v，只看错误流</p>
<h2 id="百度网盘公开链接wget下载"><a href="#百度网盘公开链接wget下载" class="headerlink" title="百度网盘公开链接wget下载"></a>百度网盘公开链接wget下载</h2><p>wget -c  –referer=公开链接地址  -O 输出文件名 “直接下载地址”    ，其中-c表示断点续传<br>wget -c –referer=<a href="http://pan.baidu.com/s/1pL0IUxH" target="_blank" rel="external">http://pan.baidu.com/s/1pL0IUxH</a>  -O a.zip “<a href="http://61.179.228.93/d1.baidupcs.com/file/4b43140bd6212b333237b391961932a4?bkt=p3-0000eea78a1d47d0402b131c2736fe70a488&amp;xcode=c0a39d5fa7dcff84c1a1bca47e82ddfb123eeb8f4d2e9e54ded0b7c77404c736&amp;fid=50867796-250528-751846568268583&amp;time=1481855378&amp;sign=FDTAXGERLBH-DCb740ccc5511e5e8fedcff06b081203-mq8GWRwB7zY3FSpQOglOpVoSn8I%3D&amp;to=lc&amp;fm=Qin,B,U,nc&amp;sta_dx=137584648&amp;sta_cs=2496&amp;sta_ft=7z&amp;sta_ct=7&amp;sta_mt=7&amp;fm2=Qingdao,B,U,nc&amp;newver=1&amp;newfm=1&amp;secfm=1&amp;flow_ver=3&amp;pkey=14005e8f94567db20cb9f1c95efbd7a8a7b7c50dcb1a000008336008&amp;sl=75956300&amp;expires=8h&amp;rt=sh&amp;r=739923821&amp;mlogid=8127629174281954396&amp;vuk=-&amp;vbdid=2201694974&amp;fin=FIFA.2002.Green.Edition-ALI213.7z&amp;fn=FIFA.2002.Green.Edition-ALI213.7z&amp;slt=pm&amp;uta=0&amp;rtype=1&amp;iv=0&amp;isw=0&amp;dp-logid=8127629174281954396&amp;dp-callid=0.1.1&amp;csl=600&amp;csign=RJ%2BYoZ6FqCL1OLeGHSbtuImu3ys%3D&amp;wshc_tag=0&amp;wsts_tag=58535192&amp;wsid_tag=6fccf309&amp;wsiphost=ipdbm" target="_blank" rel="external">http://61.179.228.93/d1.baidupcs.com/file/4b43140bd6212b333237b391961932a4?bkt=p3-0000eea78a1d47d0402b131c2736fe70a488&amp;xcode=c0a39d5fa7dcff84c1a1bca47e82ddfb123eeb8f4d2e9e54ded0b7c77404c736&amp;fid=50867796-250528-751846568268583&amp;time=1481855378&amp;sign=FDTAXGERLBH-DCb740ccc5511e5e8fedcff06b081203-mq8GWRwB7zY3FSpQOglOpVoSn8I%3D&amp;to=lc&amp;fm=Qin,B,U,nc&amp;sta_dx=137584648&amp;sta_cs=2496&amp;sta_ft=7z&amp;sta_ct=7&amp;sta_mt=7&amp;fm2=Qingdao,B,U,nc&amp;newver=1&amp;newfm=1&amp;secfm=1&amp;flow_ver=3&amp;pkey=14005e8f94567db20cb9f1c95efbd7a8a7b7c50dcb1a000008336008&amp;sl=75956300&amp;expires=8h&amp;rt=sh&amp;r=739923821&amp;mlogid=8127629174281954396&amp;vuk=-&amp;vbdid=2201694974&amp;fin=FIFA.2002.Green.Edition-ALI213.7z&amp;fn=FIFA.2002.Green.Edition-ALI213.7z&amp;slt=pm&amp;uta=0&amp;rtype=1&amp;iv=0&amp;isw=0&amp;dp-logid=8127629174281954396&amp;dp-callid=0.1.1&amp;csl=600&amp;csign=RJ%2BYoZ6FqCL1OLeGHSbtuImu3ys%3D&amp;wshc_tag=0&amp;wsts_tag=58535192&amp;wsid_tag=6fccf309&amp;wsiphost=ipdbm</a>“</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hadoop 命令]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/11/09/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/bigdata/hadoop/hadoop/</url>
      <content type="html"><![CDATA[<h2 id="显示log"><a href="#显示log" class="headerlink" title="显示log"></a>显示log</h2><p>hadoop fs -cat /tmp/app-logs/prestotest/logs/application_1460457323828_0044/BJHC-Client-77104.hadoop.jd.local_50086</p>
<h2 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h2><p>hadoop fs -mkdir /user/admin/aaron/newDir</p>
<h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><p>hadoop fs –put /home/admin/newFile /user/admin/aaron/</p>
<h2 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h2><p>hadoop fs –get /user/admin/aaron/newFile /home/admin/newFile</p>
<h2 id="显示所有job"><a href="#显示所有job" class="headerlink" title="显示所有job"></a>显示所有job</h2><p>hadoop job -list</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hadoop_rest]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/11/09/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/bigdata/hadoop/hadoop_rest/</url>
      <content type="html"><![CDATA[<p>curl -x 172.22.91.78:80 -X GET -H “Accept:application/xml” <a href="http://172.16.172.95:19888/ws/v1/history/mapreduce/jobs/job_1470405196301_64396" target="_blank" rel="external">http://172.16.172.95:19888/ws/v1/history/mapreduce/jobs/job_1470405196301_64396</a></p>
<p>curl -x 172.22.91.78:80 -X GET -H “Accept:application/json” <a href="http://172.16.172.95:19888/ws/v1/history/mapreduce/jobs/job_1470405196301_64396|python" target="_blank" rel="external">http://172.16.172.95:19888/ws/v1/history/mapreduce/jobs/job_1470405196301_64396|python</a> -m json.tool</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[fair-scheduler]]></title>
      <url>https://maobaolong.github.io/github_blog/github_blog/2016/11/09/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/bigdata/hadoop/yarn/fair-scheduler/</url>
      <content type="html"><![CDATA[<h1 id="fair-scheduler-xml的配置"><a href="#fair-scheduler-xml的配置" class="headerlink" title="fair-scheduler.xml的配置"></a>fair-scheduler.xml的配置</h1><p>在一个公司内部的Hadoop Yarn集群，肯定会被多个业务、多个用户同时使用，共享Yarn的资源，如果不做资源的管理与规划，那么整个Yarn的资源很容易被某一个用户提交的Application占满，其它任务只能等待，这种当然很不合理，我们希望每个业务都有属于自己的特定资源来运行MapReduce任务，Hadoop中提供的公平调度器–Fair Scheduler，就可以满足这种需求。</p>
<p>Fair Scheduler将整个Yarn的可用资源划分成多个资源池，每个资源池中可以配置最小和最大的可用资源（内存和CPU）、最大可同时运行Application数量、权重、以及可以提交和管理Application的用户等。</p>
<h2 id="根据用户名分配资源池"><a href="#根据用户名分配资源池" class="headerlink" title="根据用户名分配资源池"></a>根据用户名分配资源池</h2><p><img src="http://7xipth.com1.z0.glb.clouddn.com/1026-1.jpg" alt=""></p>
<p>如图所示，假设整个Yarn集群的可用资源为100vCPU，100GB内存，现在为3个业务各自规划一个资源池，另外，规划一个default资源池，用于运行其他用户和业务提交的任务。如果没有在任务中指定资源池（通过参数mapreduce.job.queuename），那么可以配置使用用户名作为资源池名称来提交任务，即用户businessA提交的任务被分配到资源池businessA中，用户businessC提交的任务被分配到资源池businessC中。除了配置的固定用户，其他用户提交的任务将会被分配到资源池default中。</p>
<p>这里的用户名，就是提交Application所使用的Linux/Unix用户名。</p>
<p>另外，每个资源池可以配置允许提交任务的用户名，比如，在资源池businessA中配置了允许用户businessA和用户lxw1234提交任务，如果使用用户lxw1234提交任务，并且在任务中指定了资源池为businessA，那么也可以正常提交到资源池businessA中。</p>
<h2 id="根据权重获得额外的空闲资源"><a href="#根据权重获得额外的空闲资源" class="headerlink" title="根据权重获得额外的空闲资源"></a>根据权重获得额外的空闲资源</h2><p>在每个资源池的配置项中，有个weight属性（默认为1），标记了资源池的权重，当资源池中有任务等待，并且集群中有空闲资源时候，每个资源池可以根据权重获得不同比例的集群空闲资源。</p>
<p>比如，资源池businessA和businessB的权重分别为2和1，这两个资源池中的资源都已经跑满了，并且还有任务在排队，此时集群中有30个Container的空闲资源，那么，businessA将会额外获得20个Container的资源，businessB会额外获得10个Container的资源。</p>
<h2 id="最小资源保证"><a href="#最小资源保证" class="headerlink" title="最小资源保证"></a>最小资源保证</h2><p>在每个资源池中，允许配置该资源池的最小资源，这是为了防止把空闲资源共享出去还未回收的时候，该资源池有任务需要运行时候的资源保证。</p>
<p>比如，资源池businessA中配置了最小资源为（5vCPU，5GB），那么即使没有任务运行，Yarn也会为资源池businessA预留出最小资源，一旦有任务需要运行，而集群中已经没有其他空闲资源的时候，这个最小资源也可以保证资源池businessA中的任务可以先运行起来，随后再从集群中获取资源。</p>
<h2 id="动态更新资源配额"><a href="#动态更新资源配额" class="headerlink" title="动态更新资源配额"></a>动态更新资源配额</h2><p>Fair Scheduler除了需要在yarn-site.xml文件中启用和配置之外，还需要一个XML文件来配置资源池以及配额，而该XML中每个资源池的配额可以动态更新，之后使用命令：yarn rmadmin –refreshQueues 来使得其生效即可，不用重启Yarn集群。</p>
<p>需要注意的是：动态更新只支持修改资源池配额，如果是新增或减少资源池，则需要重启Yarn集群。</p>
<pre><code>1. 配置文件yarn-site.xml
（1） yarn.scheduler.fair.allocation.file ：自定义XML配置文件所在位置，该文件主要用于描述各个队列的属性，比如资源量、权重等，具体配置格式将在后面介绍。
（2）  yarn.scheduler.fair.user-as-default-queue：当应用程序未指定队列名时，是否指定用户名作为应用程序所在的队列名。如果设置为false或者未设置，所有未知队列的应用程序将被提交到default队列中，默认值为true。
（3）  yarn.scheduler.fair.preemption：是否启用抢占机制，默认值是false。
（4）  yarn.scheduler.fair.sizebasedweight：在一个队列内部分配资源时，默认情况下，采用公平轮询的方法将资源分配各各个应用程序，而该参数则提供了另外一种资源分配方式：按照应用程序资源需求数目分配资源，即需求资源数量越多，分配的资源越多。默认情况下，该参数值为false。
（5）  yarn.scheduler.assignmultiple：是否启动批量分配功能。当一个节点出现大量资源时，可以一次分配完成，也可以多次分配完成。默认情况下，该参数值为false。
（6）  yarn.scheduler.fair.max.assign：如果开启批量分配功能，可指定一次分配的container数目。默认情况下，该参数值为-1，表示不限制。
（7）  yarn.scheduler.fair.locality.threshold.node：当应用程序请求某个节点上资源时，它可以接受的可跳过的最大资源调度机会。当按照分配策略，可将一个节点上的资源分配给某个应用程序时，如果该节点不是应用程序期望的节点，可选择跳过该分配机会暂时将资源分配给其他应用程序，直到出现满足该应用程序需的节点资源出现。通常而言，一次心跳代表一次调度机会，而该参数则表示跳过调度机会占节点总数的比例，默认情况下，该值为-1.0，表示不跳过任何调度机会。
（8）  yarn.scheduler.fair.locality.threshold.rack：当应用程序请求某个机架上资源时，它可以接受的可跳过的最大资源调度机会。
（9）  yarn.scheduler.increment-allocation-mb：内存规整化单位，默认是1024，这意味着，如果一个Container请求资源是1.5GB，则将被调度器规整化为ceiling(1.5 GB / 1GB) * 1G=2GB。
（10）  yarn.scheduler.increment-allocation-vcores：虚拟CPU规整化单位，默认是1，含义与内存规整化单位类似。
2. 自定义配置文件
Fair Scheduler允许用户将队列信息专门放到一个配置文件（默认是fair-scheduler.xml），对于每个队列，管理员可配置以下几个选项：
（1）  minResources ：最少资源保证量，设置格式为“X mb, Y vcores”，当一个队列的最少资源保证量未满足时，它将优先于其他同级队列获得资源，对于不同的调度策略（后面会详细介绍），最少资源保证量的含义不同，对于fair策略，则只考虑内存资源，即如果一个队列使用的内存资源超过了它的最少资源量，则认为它已得到了满足；对于drf策略，则考虑主资源使用的资源量，即如果一个队列的主资源量超过它的最少资源量，则认为它已得到了满足。
（2）  maxResources：最多可以使用的资源量，fair scheduler会保证每个队列使用的资源量不会超过该队列的最多可使用资源量。
（3）  maxRunningApps：最多同时运行的应用程序数目。通过限制该数目，可防止超量Map Task同时运行时产生的中间输出结果撑爆磁盘。
（4）  minSharePreemptionTimeout：最小共享量抢占时间。如果一个资源池在该时间内使用的资源量一直低于最小资源量，则开始抢占资源。
（5）  schedulingMode/schedulingPolicy：队列采用的调度模式，可以是fifo、fair或者drf。
（6）  aclSubmitApps：可向队列中提交应用程序的Linux用户或用户组列表，默认情况下为“*”，表示任何用户均可以向该队列提交应用程序。需要注意的是，该属性具有继承性，即子队列的列表会继承父队列的列表。配置该属性时，用户之间或用户组之间用“，”分割，用户和用户组之间用空格分割，比如“user1, user2 group1,group2”。
（7）  aclAdministerApps：该队列的管理员列表。一个队列的管理员可管理该队列中的资源和应用程序，比如可杀死任意应用程序。
管理员也可为单个用户添加maxRunningJobs属性限制其最多同时运行的应用程序数目。此外，管理员也可通过以下参数设置以上属性的默认值：
（1）  userMaxJobsDefault：用户的maxRunningJobs属性的默认值。
（2） defaultMinSharePreemptionTimeout ：队列的minSharePreemptionTimeout属性的默认值。
（3）  defaultPoolSchedulingMode：队列的schedulingMode属性的默认值。
（4）  fairSharePreemptionTimeout：公平共享量抢占时间。如果一个资源池在该时间内使用资源量一直低于公平共享量的一半，则开始抢占资源。
</code></pre>]]></content>
    </entry>
    
  
  
</search>
